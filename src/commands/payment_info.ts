import { BotContext } from '../bot';
import { prisma } from '../utils/database';
import { getCurrentWeek } from '../utils/week';
import { safeEditOrReply } from '../utils/safe-edit';

export const paymentInfoCommand = async (ctx: BotContext): Promise<void> => {
  try {
    const { week, year } = getCurrentWeek();

    const gameSession = await prisma.gameSession.findUnique({
      where: {
        week_year: { week, year },
      },
    });

    if (!gameSession || !gameSession.isInitialized) {
      await ctx.reply(
        '‚ùå <b>–ò–≥—Ä–∞ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞</b>\n\n' +
        '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã.',
        { parse_mode: 'HTML' }
      );
      return;
    }

    const formatDate = (date: Date): string => {
      return date.toLocaleString('ru-RU', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    };

    let message = `üí≥ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ</b>\n\n`;

    if (gameSession.gameDate) {
      message += `üìÖ <b>–î–∞—Ç–∞ –∏–≥—Ä—ã:</b> ${formatDate(gameSession.gameDate)}\n`;
    }

    if (gameSession.gameLocation) {
      message += `üìç <b>–ú–µ—Å—Ç–æ:</b> ${gameSession.gameLocation}\n\n`;
    }

    message += `üí∞ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n`;

    if (gameSession.paymentPhone) {
      message += `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>${gameSession.paymentPhone}</code>\n`;
    }

    if (gameSession.paymentBank) {
      message += `üè¶ <b>–ë–∞–Ω–∫:</b> ${gameSession.paymentBank}\n`;
    }

    if (gameSession.paymentAmount) {
      message += `üíµ <b>–°—É–º–º–∞:</b> ${gameSession.paymentAmount} ‚ÇΩ\n\n`;
    }

    message += `<b>üìã –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å:</b>\n`;
    message += `1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n`;
    message += `2. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω—É –æ–± –æ–ø–ª–∞—Ç–µ\n\n`;

    message += `üí° <i>–ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ –∫–æ–º–∞–Ω–¥–æ–π /confirm_player_payment</i>`;

    await safeEditOrReply(ctx, message, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É', callback_data: 'refresh_info' }],
          [{ text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–∞–≤', callback_data: 'refresh_info' }],
          [{ text: '‚ùé –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_menu' }],
        ],
      },
    });

  } catch (error) {
    console.error('Error in payment info command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ.');
  }
};