import { container } from 'tsyringe';
import { BotContext } from '../bot';
import { KEYBOARDS, CONFIG } from '../config';
import { TeamService } from '../services/team.service';
import { TeamPlayerService } from '../services/team-player.service';
import { checkAdminPrivateOnly } from '../utils/chat';
import { prisma } from '../utils/database';
import { getCurrentWeek } from '../utils/week';

export const teamsCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    // –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ callback query, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    let query = '';
    if (ctx.message && 'text' in ctx.message) {
      query = ctx.message.text?.replace('/teams', '').trim() || '';
    }

    const { main } = await ctx.gameService.getWeekPlayers();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    const { week, year } = getCurrentWeek();
    const existingSession = await prisma.gameSession.findUnique({
      where: { week_year: { week, year } }
    });
    
    const requiredPlayers = existingSession?.format === 'TRI' ? 24 : 16;
    const formatName = existingSession?.format === 'TRI' ? 'TRI –∫–æ–º–∞–Ω–¥ (3√ó8)' : '–∫–æ–º–∞–Ω–¥ (2√ó8)';

    if (main.length < requiredPlayers) {
      const errorMessage = `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è ${formatName} (${main.length}/${requiredPlayers})`;
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery(errorMessage, { show_alert: true });
      } else {
        await ctx.reply(errorMessage);
      }
      return;
    }

    const teamService = container.resolve(TeamService);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å TRI –∫–æ–º–∞–Ω–¥—ã
    if (existingSession?.format === 'TRI') {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã
      const threeTeamBalance = await teamService.generateThreeTeams(main);
      
      let threeTeamNames = { teamA: 'üî¥ –ö—Ä–∞—Å–Ω–∞—è', teamB: 'üîµ –°–∏–Ω—è—è', teamC: 'üü¢ –ó–µ–ª—ë–Ω–∞—è' };
      
      if (query) {
        if (query.toLowerCase() === 'ai') {
          await ctx.reply('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ç—Ä—ë—Ö –∫–æ–º–∞–Ω–¥...');
          const response = await ctx.aiService.generateResponse(
            '–ü—Ä–∏–¥—É–º–∞–π —Ç—Ä–∏ —Å–º–µ—à–Ω—ã—Ö –∏ –∫–ª–∞—Å—Å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ù–∞–∑–≤–∞–Ω–∏–µ1;–ù–∞–∑–≤–∞–Ω–∏–µ2;–ù–∞–∑–≤–∞–Ω–∏–µ3" –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.'
          );
          const parts = response.split(/;|\n|,|\|/).map(p => p.trim()).filter(Boolean);
          if (parts.length >= 3) {
            threeTeamNames = { teamA: parts[0], teamB: parts[1], teamC: parts[2] };
          }
        } else {
          const parts = query.split(/;|,|\n/).map(p => p.trim()).filter(Boolean);
          if (parts.length >= 3) {
            threeTeamNames = { teamA: parts[0], teamB: parts[1], teamC: parts[2] };
          }
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–∞–Ω–¥
      const gameSession = await prisma.gameSession.update({
        where: { week_year: { week, year } },
        data: {
          teamA: threeTeamNames.teamA,
          teamB: threeTeamNames.teamB,
          teamC: threeTeamNames.teamC,
          isInitialized: true,
          isConfirmed: false
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ TeamPlayerService
      const teamPlayerService = container.resolve(TeamPlayerService);
      await teamPlayerService.saveThreeTeamComposition(
        gameSession.id,
        threeTeamBalance.teamA.players,
        threeTeamBalance.teamB.players,
        threeTeamBalance.teamC.players
      );
      
      const message = teamService.formatThreeTeamsMessage(threeTeamBalance, threeTeamNames);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å TRI –∫–æ–º–∞–Ω–¥–∞–º–∏
      if (ctx.callbackQuery) {
        await ctx.editMessageText(
          `‚öΩ <b>TRI –∫–æ–º–∞–Ω–¥—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n${message}\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_confirm –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–æ–≤`,
          {
            parse_mode: 'HTML'
          }
        );
        await ctx.answerCbQuery('‚ôªÔ∏è TRI –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã');
      } else {
        await ctx.reply(
          `‚öΩ <b>TRI –∫–æ–º–∞–Ω–¥—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n${message}\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_confirm –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–æ–≤`,
          { parse_mode: 'HTML' }
        );
      }
      return;
    }
    
    // –û–±—ã—á–Ω—ã–µ –¥–≤–µ –∫–æ–º–∞–Ω–¥—ã
    const balance = await teamService.generateBalancedTeams(main);

    let teamNames = { teamA: 'üî¥', teamB: 'üîµ' };

    if (query) {
      if (query.toLowerCase() === 'ai') {
        await ctx.reply('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥...');
        const response = await ctx.aiService.generateResponse(
          '–ü—Ä–∏–¥—É–º–∞–π –¥–≤–∞ —Å–º–µ—à–Ω—ã—Ö –∏ –∫–ª–∞—Å—Å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ù–∞–∑–≤–∞–Ω–∏–µ1;–ù–∞–∑–≤–∞–Ω–∏–µ2" –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.'
        );
        const parts = response.split(/;|\n|,|\|/).map(p => p.trim()).filter(Boolean);
        if (parts.length >= 2) {
          teamNames = { teamA: parts[0], teamB: parts[1] };
        }
      } else {
        const parts = query.split(/;|,|\n/).map(p => p.trim()).filter(Boolean);
        if (parts.length >= 2) {
          teamNames = { teamA: parts[0], teamB: parts[1] };
        }
      }
    }

    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç
    if (!query && Math.random() < 0.5) {
      teamNames = { teamA: 'üîµ', teamB: 'üî¥' };
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–æ–±—ã—á–Ω—ã–µ –¥–≤–µ –∫–æ–º–∞–Ω–¥—ã)
    const gameSession = await prisma.gameSession.upsert({
      where: { week_year: { week, year } },
      update: {
        teamA: teamNames.teamA,
        teamB: teamNames.teamB,
        format: 'DUO', // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç DUO
      },
      create: {
        week,
        year,
        format: 'DUO',
        teamA: teamNames.teamA,
        teamB: teamNames.teamB,
      },
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ TeamPlayerService
    const teamPlayerService = container.resolve(TeamPlayerService);
    await teamPlayerService.saveTeamComposition(
      gameSession.id,
      balance.teamA.players,
      balance.teamB.players
    );

    const message = teamService.formatTeamsMessage(balance, teamNames);

    // –ï—Å–ª–∏ —ç—Ç–æ callback query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        reply_markup: {
          inline_keyboard: KEYBOARDS.ADMIN_TEAMS(CONFIG.SYNERGY_ENABLED),
        },
        parse_mode: 'HTML',
      });
      await ctx.answerCbQuery('‚ôªÔ∏è –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã');
    } else {
      await ctx.reply(message, {
        reply_markup: {
          inline_keyboard: KEYBOARDS.ADMIN_TEAMS(CONFIG.SYNERGY_ENABLED),
        },
        parse_mode: 'HTML',
      });
    }
  } catch (error) {
    console.error('Error in teams command:', error);
    const errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥.';
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage, { show_alert: true });
    } else {
      await ctx.reply(errorMessage);
    }
  }
};