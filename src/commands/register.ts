import { BotContext } from '@/bot';
import { CONFIG } from '@/config';
import { prisma } from '@/utils/database';
import { escapeHtml } from '@/utils/html';

export const registerPlayerCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      return;
    }

    const text = ('text' in ctx.message! && ctx.message.text) ? ctx.message.text : '';
    const args = text.split(' ').slice(1);
    
    if (args.length < 2 || args.length > 4) {
      await ctx.reply(
        `üìã <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n` +
        `/register username "–ò–º—è –§–∞–º–∏–ª–∏—è" [skill] [telegram_id]\n\n` +
        `<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n` +
        `‚Ä¢ username - –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞ (–±–µ–∑ @)\n` +
        `‚Ä¢ "–ò–º—è –§–∞–º–∏–ª–∏—è" - –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö\n` +
        `‚Ä¢ skill - —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã 1-5 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)\n` +
        `‚Ä¢ telegram_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n` +
        `<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n` +
        `/register john_doe "–î–∂–æ–Ω –î–æ—É"\n` +
        `/register mary_smith "–ú–∞—Ä–∏—è –°–º–∏—Ç" 4\n` +
        `/register alex_jones "–ê–ª–µ–∫—Å –î–∂–æ–Ω—Å" 5 123456789`
      , { parse_mode: 'HTML' });
      return;
    }

    const username = args[0].replace('@', '');
    
    // –ü–∞—Ä—Å–∏–º –∏–º—è –∏–∑ –∫–∞–≤—ã—á–µ–∫
    let firstName: string;
    let skill = 3;
    let telegramId: number | null = null;
    
    // –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    const fullText = text.substring(text.indexOf(' ') + 1);
    const nameMatch = fullText.match(/"([^"]+)"/);
    
    if (!nameMatch) {
      await ctx.reply('‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö: "–ò–º—è –§–∞–º–∏–ª–∏—è"');
      return;
    }
    
    firstName = nameMatch[1];
    
    // –ü–∞—Ä—Å–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ –∫–∞–≤—ã—á–µ–∫
    const afterName = fullText.substring(fullText.indexOf(nameMatch[0]) + nameMatch[0].length).trim();
    const remainingArgs = afterName.split(' ').filter(arg => arg.length > 0);
    
    if (remainingArgs.length >= 1) {
      const skillValue = parseInt(remainingArgs[0]);
      if (isNaN(skillValue) || skillValue < 1 || skillValue > 5) {
        await ctx.reply('‚ùå –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5');
        return;
      }
      skill = skillValue;
    }
    
    if (remainingArgs.length >= 2) {
      const telegramIdValue = parseInt(remainingArgs[1]);
      if (isNaN(telegramIdValue)) {
        await ctx.reply('‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
        return;
      }
      telegramId = telegramIdValue;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º username
    const existingPlayer = await prisma.player.findFirst({
      where: { username }
    });
    
    if (existingPlayer) {
      await ctx.reply(`‚ùå –ò–≥—Ä–æ–∫ —Å username @${username} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º telegram_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (telegramId) {
      const existingByTelegramId = await prisma.player.findFirst({
        where: { telegramId: BigInt(telegramId) }
      });
      
      if (existingByTelegramId) {
        await ctx.reply(`‚ùå –ò–≥—Ä–æ–∫ —Å Telegram ID ${telegramId} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (@${existingByTelegramId.username})`);
        return;
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
    const player = await prisma.player.create({
      data: {
        telegramId: telegramId ? BigInt(telegramId) : BigInt(Date.now() * -1), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π timestamp –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
        username,
        firstName,
        skillSelf: skill,
      }
    });
    
    const escapedName = escapeHtml(firstName);
    await ctx.reply(
      `‚úÖ <b>–ò–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b>\n\n` +
      `üë§ –ò–º—è: ${escapedName}\n` +
      `üè∑Ô∏è Username: @${username}\n` +
      `‚≠ê –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã: ${skill}/5\n` +
      `üÜî ID: ${player.id}` +
      (telegramId ? `\nüì± Telegram ID: ${telegramId}` : '')
    , { parse_mode: 'HTML' });
    
  } catch (error) {
    console.error('Error in register player command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞.');
  }
};

export const bulkRegisterCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      return;
    }

    const text = ('text' in ctx.message! && ctx.message.text) ? ctx.message.text : '';
    
    if (!text.includes('\n')) {
      await ctx.reply(
        `üìã <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n` +
        `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /bulk_register, –∞ –∑–∞—Ç–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
        `username1 "–ò–º—è1 –§–∞–º–∏–ª–∏—è1" skill1\n` +
        `username2 "–ò–º—è2 –§–∞–º–∏–ª–∏—è2" skill2\n` +
        `...\n\n` +
        `<b>–ü—Ä–∏–º–µ—Ä:</b>\n` +
        `/bulk_register\n` +
        `john_doe "–î–∂–æ–Ω –î–æ—É" 4\n` +
        `mary_smith "–ú–∞—Ä–∏—è –°–º–∏—Ç" 5\n` +
        `alex_jones "–ê–ª–µ–∫—Å –î–∂–æ–Ω—Å" 3`
      , { parse_mode: 'HTML' });
      return;
    }
    
    const lines = text.split('\n').slice(1); // —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∫–æ–º–∞–Ω–¥–æ–π
    const results: string[] = [];
    let registered = 0;
    let errors = 0;
    
    for (const line of lines) {
      const trimmedLine = line.trim();
      if (!trimmedLine) continue;
      
      try {
        // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É: username "Name" skill
        const nameMatch = trimmedLine.match(/^(\S+)\s+"([^"]+)"(?:\s+(\d+))?/);
        
        if (!nameMatch) {
          results.push(`‚ùå ${trimmedLine} - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç`);
          errors++;
          continue;
        }
        
        const [, rawUsername, firstName, skillStr] = nameMatch;
        const username = rawUsername.replace('@', ''); // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        const skill = skillStr ? parseInt(skillStr) : 3;
        
        if (skill < 1 || skill > 5) {
          results.push(`‚ùå @${username} - —É—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1-5`);
          errors++;
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        const existing = await prisma.player.findFirst({
          where: { username }
        });
        
        if (existing) {
          results.push(`‚ö†Ô∏è @${username} - —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          errors++;
          continue;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        await prisma.player.create({
          data: {
            telegramId: BigInt(Date.now() * -1 - registered), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID
            username,
            firstName,
            skillSelf: skill,
          }
        });
        
        results.push(`‚úÖ @${username} - ${firstName} (${skill})`);
        registered++;
        
      } catch (error) {
        results.push(`‚ùå ${trimmedLine} - –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
        errors++;
      }
    }
    
    let message = `üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n`;
    message += `‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${registered}\n`;
    message += `‚ùå –û—à–∏–±–æ–∫: ${errors}\n\n`;
    
    if (results.length > 0) {
      message += `<b>–î–µ—Ç–∞–ª–∏:</b>\n${results.slice(0, 20).join('\n')}`;
      
      if (results.length > 20) {
        message += `\n... –∏ –µ—â–µ ${results.length - 20} –∑–∞–ø–∏—Å–µ–π`;
      }
    }
    
    await ctx.reply(message, { parse_mode: 'HTML' });
    
  } catch (error) {
    console.error('Error in bulk register command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
  }
};

export const editPlayerCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      return;
    }

    const text = ('text' in ctx.message! && ctx.message.text) ? ctx.message.text : '';
    const args = text.split(' ').slice(1);
    
    if (args.length < 2) {
      await ctx.reply(
        `üìã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞:</b>\n\n` +
        `/edit_player username field value\n\n` +
        `<b>–ü–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n` +
        `‚Ä¢ name "–ù–æ–≤–æ–µ –ò–º—è" - –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è\n` +
        `‚Ä¢ skill 1-5 - –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã\n` +
        `‚Ä¢ username –Ω–æ–≤—ã–π_—é–∑–µ—Ä–Ω–µ–π–º - –∏–∑–º–µ–Ω–∏—Ç—å username\n\n` +
        `<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n` +
        `/edit_player john_doe name "–î–∂–æ–Ω –°–º–∏—Ç"\n` +
        `/edit_player mary_smith skill 4\n` +
        `/edit_player old_name username new_name`
      , { parse_mode: 'HTML' });
      return;
    }

    const username = args[0].replace('@', '');
    const field = args[1].toLowerCase();
    
    // –ò—â–µ–º –∏–≥—Ä–æ–∫–∞
    const player = await prisma.player.findFirst({
      where: { username }
    });
    
    if (!player) {
      await ctx.reply(`‚ùå –ò–≥—Ä–æ–∫ @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    let updateData: any = {};
    let successMessage = '';
    
    switch (field) {
      case 'name':
        // –ü–∞—Ä—Å–∏–º –∏–º—è –∏–∑ –∫–∞–≤—ã—á–µ–∫
        const nameMatch = text.match(/"([^"]+)"/);
        if (!nameMatch) {
          await ctx.reply('‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö: "–ù–æ–≤–æ–µ –ò–º—è"');
          return;
        }
        updateData.firstName = nameMatch[1];
        successMessage = `–∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "${nameMatch[1]}"`;
        break;
        
      case 'skill':
        const skill = parseInt(args[2]);
        if (isNaN(skill) || skill < 1 || skill > 5) {
          await ctx.reply('‚ùå –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5');
          return;
        }
        updateData.skillSelf = skill;
        successMessage = `—É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${skill}`;
        break;
        
      case 'username':
        const newUsername = args[2].replace('@', '');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–≤—ã–π username
        const existingUser = await prisma.player.findFirst({
          where: { username: newUsername }
        });
        if (existingUser && existingUser.id !== player.id) {
          await ctx.reply(`‚ùå Username @${newUsername} —É–∂–µ –∑–∞–Ω—è—Ç`);
          return;
        }
        updateData.username = newUsername;
        successMessage = `username –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ @${newUsername}`;
        break;
        
      default:
        await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ. –î–æ—Å—Ç—É–ø–Ω—ã: name, skill, username');
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    const updatedPlayer = await prisma.player.update({
      where: { id: player.id },
      data: updateData
    });
    
    const escapedName = escapeHtml(updatedPlayer.firstName);
    await ctx.reply(
      `‚úÖ <b>–ò–≥—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:</b>\n\n` +
      `üë§ –ò–º—è: ${escapedName}\n` +
      `üè∑Ô∏è Username: @${updatedPlayer.username}\n` +
      `‚≠ê –£—Ä–æ–≤–µ–Ω—å: ${updatedPlayer.skillSelf}/5\n\n` +
      `üìù ${successMessage}`
    , { parse_mode: 'HTML' });
    
  } catch (error) {
    console.error('Error in edit player command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞.');
  }
};

export const linkPlayerCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      return;
    }

    const text = ('text' in ctx.message! && ctx.message.text) ? ctx.message.text : '';
    const args = text.split(' ').slice(1);
    
    if (args.length !== 2) {
      await ctx.reply(
        `üìã <b>–°–≤—è–∑–∞—Ç—å –∏–≥—Ä–æ–∫–∞ —Å Telegram ID:</b>\n\n` +
        `/link_player username telegram_id\n\n` +
        `<b>–ü—Ä–∏–º–µ—Ä:</b>\n` +
        `/link_player john_doe 123456789`
      , { parse_mode: 'HTML' });
      return;
    }

    const username = args[0].replace('@', '');
    const telegramId = parseInt(args[1]);
    
    if (isNaN(telegramId)) {
      await ctx.reply('‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
      return;
    }
    
    // –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ username
    const player = await prisma.player.findFirst({
      where: { username }
    });
    
    if (!player) {
      await ctx.reply(`‚ùå –ò–≥—Ä–æ–∫ @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —ç—Ç–æ—Ç Telegram ID
    const existingByTelegramId = await prisma.player.findFirst({
      where: { 
        telegramId: BigInt(telegramId),
        id: { not: player.id }
      }
    });
    
    if (existingByTelegramId) {
      await ctx.reply(`‚ùå Telegram ID ${telegramId} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–≥—Ä–æ–∫–æ–º @${existingByTelegramId.username}`);
      return;
    }
    
    // –°–≤—è–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å Telegram ID
    await prisma.player.update({
      where: { id: player.id },
      data: { telegramId: BigInt(telegramId) }
    });
    
    const escapedName = escapeHtml(player.firstName);
    await ctx.reply(
      `‚úÖ <b>–ò–≥—Ä–æ–∫ —Å–≤—è–∑–∞–Ω —Å Telegram:</b>\n\n` +
      `üë§ ${escapedName} (@${username})\n` +
      `üì± Telegram ID: ${telegramId}\n\n` +
      `–¢–µ–ø–µ—Ä—å –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞`
    , { parse_mode: 'HTML' });
    
  } catch (error) {
    console.error('Error in link player command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞.');
  }
};