import { BotContext } from '../bot';
import { prisma } from '../utils/database';
import { getCurrentWeek } from '../utils/week';
import { escapeHtml } from '../utils/html';
import { CONFIG } from '../config';
import { TeamService } from '../services/team.service';
import { TeamPlayerService } from '../services/team-player.service';
import { container } from 'tsyringe';

export const editTeamsCommand = async (ctx: BotContext): Promise<void> => {
  try {
    const { week, year } = getCurrentWeek();

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã
    const gameSession = await prisma.gameSession.findUnique({
      where: { week_year: { week, year } },
    });

    if (!gameSession) {
      await ctx.editMessageText('‚ùå –ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –Ω–µ–¥–µ–ª—é.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'regenerate_teams' }]
          ]
        }
      });
      return;
    }

    const teamPlayerService = container.resolve(TeamPlayerService);
    const teamComposition = await teamPlayerService.getTeamComposition(gameSession.id);

    if (!teamComposition) {
      await ctx.editMessageText('‚ùå –°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'regenerate_teams' }]
          ]
        }
      });
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∏–º–µ–Ω–∏
    const teamAPlayers = [...teamComposition.teamA].sort((a, b) => a.firstName.localeCompare(b.firstName));
    const teamBPlayers = [...teamComposition.teamB].sort((a, b) => a.firstName.localeCompare(b.firstName));

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const formatTeamForEdit = (players: any[], teamName: string, teamLetter: 'A' | 'B'): string => {
      return players.map((p, i) => {
        const escapedName = escapeHtml(p.firstName);
        const usernameStr = p.username ? ` (@${p.username})` : '';
        return `${i + 1}. ${escapedName}${usernameStr}`;
      }).join('\n');
    };

    const teamAStr = formatTeamForEdit(teamAPlayers, 'üî¥', 'A');
    const teamBStr = formatTeamForEdit(teamBPlayers, 'üîµ', 'B');

    const message = `‚úèÔ∏è <b>–†—É—á–Ω–∞—è –ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥</b>\n\n` +
      `<b>üî¥ –ö–æ–º–∞–Ω–¥–∞ A:</b>\n${teamAStr}\n\n` +
      `<b>üîµ –ö–æ–º–∞–Ω–¥–∞ B:</b>\n${teamBStr}\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:`;

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const keyboard: any[][] = [];

    // –ò–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã A
    teamAPlayers.forEach((player, i) => {
      keyboard.push([{
        text: `üî¥‚Üíüîµ ${player.firstName}`,
        callback_data: `move_player_A_${player.id}`
      }]);
    });

    // –ò–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã B
    teamBPlayers.forEach((player, i) => {
      keyboard.push([{
        text: `üîµ‚Üíüî¥ ${player.firstName}`,
        callback_data: `move_player_B_${player.id}`
      }]);
    });

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.push([
      { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'recalculate_balance' },
      { text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–º–∞–Ω–¥–∞–º', callback_data: 'regenerate_teams' }
    ]);
    keyboard.push([
      { text: '‚ùé –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_admin_menu' }
    ]);

    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (error) {
    console.error('Error in edit teams command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥.');
  }
};

export const movePlayerCommand = async (ctx: BotContext, fromTeam: 'A' | 'B', playerId: number): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.answerCbQuery('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      return;
    }

    const { week, year } = getCurrentWeek();

    const gameSession = await prisma.gameSession.findUnique({
      where: { week_year: { week, year } },
    });

    if (!gameSession) {
      await ctx.answerCbQuery('‚ùå –ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const teamPlayerService = container.resolve(TeamPlayerService);
    const teamComposition = await teamPlayerService.getTeamComposition(gameSession.id);
    
    if (!teamComposition) {
      await ctx.answerCbQuery('‚ùå –°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    const newTeam = fromTeam === 'A' ? 'B' : 'A';

    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    await teamPlayerService.movePlayerToTeam(gameSession.id, playerId, newTeam);

    await ctx.answerCbQuery('‚úÖ –ò–≥—Ä–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω!');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await editTeamsCommand(ctx);

  } catch (error) {
    console.error('Error in move player command:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞');
  }
};

export const recalculateBalanceCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.answerCbQuery('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      return;
    }

    const { week, year } = getCurrentWeek();

    const gameSession = await prisma.gameSession.findUnique({
      where: { week_year: { week, year } },
    });

    if (!gameSession) {
      await ctx.answerCbQuery('‚ùå –ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const teamPlayerService = container.resolve(TeamPlayerService);
    const teamComposition = await teamPlayerService.getTeamComposition(gameSession.id);

    if (!teamComposition) {
      await ctx.answerCbQuery('‚ùå –°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    const teamService = container.resolve(TeamService);

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —Å–æ—Å—Ç–∞–≤–æ–≤
    const teamAWeight = teamComposition.teamA.reduce((sum, player) => sum + teamService.getPlayerWeight(player), 0);
    const teamBWeight = teamComposition.teamB.reduce((sum, player) => sum + teamService.getPlayerWeight(player), 0);
    const difference = Math.abs(teamAWeight - teamBWeight);

    const balance = {
      teamA: { players: teamComposition.teamA, totalRating: teamAWeight, averageRating: teamAWeight / teamComposition.teamA.length },
      teamB: { players: teamComposition.teamB, totalRating: teamBWeight, averageRating: teamBWeight / teamComposition.teamB.length },
      difference,
      winProbability: teamService.calculateWinProbability(teamAWeight, teamBWeight),
    };

    const message = teamService.formatTeamsMessage(balance);

    await ctx.editMessageText(message + '\n\n‚úÖ <i>–°–æ—Å—Ç–∞–≤—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π</i>', {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: 'confirm_teams' },
            { text: '‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∞–≤–∫—É', callback_data: 'edit_teams' }
          ],
          [{ text: '‚ôªÔ∏è –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'regenerate_teams' }],
          [{ text: '‚ùé –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_admin_menu' }]
        ]
      }
    });

    await ctx.answerCbQuery('üîÑ –ë–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω!');

  } catch (error) {
    console.error('Error in recalculate balance command:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –±–∞–ª–∞–Ω—Å–∞');
  }
};