import { container } from 'tsyringe';
import { BotContext } from '../bot';
import { CONFIG } from '../config';
import { checkAdminPrivateOnly } from '../utils/chat';
import { prisma } from '../utils/database';
import { logger } from '../utils/logger';

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π DUO –∏–≥—Ä—ã
export const reopenLastDuoCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã—Ç—É—é DUO —Å–µ—Å—Å–∏—é
    const lastClosedSession = await prisma.gameSession.findFirst({
      where: {
        format: 'DUO',
        isClosed: true
      },
      orderBy: { createdAt: 'desc' },
      include: {
        matchResult: true,
        teamPlayers: {
          include: {
            player: true
          }
        }
      }
    });

    if (!lastClosedSession) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö DUO –∏–≥—Ä –¥–ª—è –æ—Ç–∫–∞—Ç–∞.');
      return;
    }

    if (!lastClosedSession.matchResult) {
      await ctx.reply('‚ùå –£ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–∞ –¥–ª—è –æ—Ç–∫–∞—Ç–∞.');
      return;
    }

    const sessionDate = lastClosedSession.createdAt.toLocaleDateString('ru-RU');
    const sessionTime = lastClosedSession.createdAt.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    const matchResult = lastClosedSession.matchResult;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirmMessage = 
      `‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π DUO –∏–≥—Ä—ã</b>\n\n` +
      `üìÖ <b>–î–∞—Ç–∞ –∏–≥—Ä—ã:</b> ${sessionDate} ${sessionTime}\n` +
      `üÜî <b>ID —Å–µ—Å—Å–∏–∏:</b> ${lastClosedSession.id}\n` +
      `‚öΩ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> ${lastClosedSession.teamA} ${matchResult.teamAScore}-${matchResult.teamBScore} ${lastClosedSession.teamB}\n` +
      `üë• <b>–ò–≥—Ä–æ–∫–æ–≤:</b> ${lastClosedSession.teamPlayers.length}\n\n` +
      `<b>–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç–∫–∞—Ç:</b>\n` +
      `‚Ä¢ TrueSkill —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n` +
      `‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Player Pairs\n` +
      `‚Ä¢ MVP –±–æ–Ω—É—Å–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n` +
      `‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞\n` +
      `‚Ä¢ –°–µ—Å—Å–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∞\n\n` +
      `‚ùì <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–∫–∞—Ç?</b>`;

    await ctx.reply(confirmMessage, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –î–∞, –æ—Ç–∫–∞—Ç–∏—Ç—å', callback_data: `confirm_reopen_${lastClosedSession.id}` },
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_reopen' }
          ]
        ]
      }
    });

    logger.info(`Reopen confirmation requested for DUO session ${lastClosedSession.id} by admin ${ctx.from?.id}`);

  } catch (error) {
    logger.error('Error in reopenLastDuo command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä—ã –¥–ª—è –æ—Ç–∫–∞—Ç–∞.');
  }
};

// –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–∫–∞—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
export const executeReopenDuo = async (ctx: BotContext, sessionId: number): Promise<void> => {
  try {
    await ctx.answerCbQuery('üîÑ –í—ã–ø–æ–ª–Ω—è—é –æ—Ç–∫–∞—Ç...');

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
    const session = await prisma.gameSession.findUnique({
      where: { id: sessionId },
      include: {
        matchResult: true,
        teamPlayers: {
          include: {
            player: true
          }
        }
      }
    });

    if (!session || !session.matchResult) {
      await ctx.editMessageText('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.');
      return;
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–∞—Ç –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await prisma.$transaction(async (tx) => {
      // 1. –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º TrueSkill —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏–∑ RatingEvent
      const ratingEvents = await tx.ratingEvent.findMany({
        where: { matchId: sessionId },
        include: { player: true }
      });

      for (const event of ratingEvents) {
        await tx.player.update({
          where: { id: event.playerId },
          data: {
            tsMu: event.muBefore,
            tsSigma: event.sigmaBefore
          }
        });
      }

      // 2. –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º Player Pairs —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const teamAPlayers = session.teamPlayers.filter(tp => tp.team === 'A').map(tp => tp.playerId);
      const teamBPlayers = session.teamPlayers.filter(tp => tp.team === 'B').map(tp => tp.playerId);
      
      const winnerTeamPlayers = session.matchResult!.teamAScore > session.matchResult!.teamBScore ? teamAPlayers : teamBPlayers;
      const loserTeamPlayers = session.matchResult!.teamAScore > session.matchResult!.teamBScore ? teamBPlayers : teamAPlayers;

      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—ã –≤ –≤—ã–∏–≥—Ä–∞–≤—à–µ–π –∫–æ–º–∞–Ω–¥–µ (—É–±–∏—Ä–∞–µ–º win)
      await rollbackPlayerPairs(tx, winnerTeamPlayers, 'win');
      
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—ã –≤ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–π –∫–æ–º–∞–Ω–¥–µ (—É–±–∏—Ä–∞–µ–º loss)  
      await rollbackPlayerPairs(tx, loserTeamPlayers, 'loss');

      // 3. –£–¥–∞–ª—è–µ–º MVP –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      const mvpEvents = await tx.ratingEvent.findMany({
        where: {
          matchId: sessionId,
          reason: 'mvp'
        }
      });

      for (const mvpEvent of mvpEvents) {
        const meta = mvpEvent.meta as any;
        const mvpBonus = meta?.bonus || CONFIG.RATING_MVP_MU_BONUS;
        
        await tx.player.update({
          where: { id: mvpEvent.playerId },
          data: {
            tsMu: { decrement: mvpBonus },
            mvpCount: { decrement: 1 }
          }
        });
      }

      // 4. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞
      await tx.ratingEvent.deleteMany({
        where: { matchId: sessionId }
      });

      // 5. –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
      await tx.matchResult.delete({
        where: { gameSessionId: sessionId }
      });

      // 6. –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
      await tx.gameSession.update({
        where: { id: sessionId },
        data: { isClosed: false }
      });
    });

    const successMessage = 
      `‚úÖ <b>–û—Ç–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n` +
      `üîì –°–µ—Å—Å–∏—è #${sessionId} –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∞\n` +
      `‚Ü©Ô∏è –†–µ–π—Ç–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n` +
      `üìä Player Pairs —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n` +
      `üèÜ MVP –±–æ–Ω—É—Å—ã —É–¥–∞–ª–µ–Ω—ã\n\n` +
      `üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ /result`;

    await ctx.editMessageText(successMessage, { parse_mode: 'HTML' });

    logger.info(`DUO session ${sessionId} successfully reopened by admin ${ctx.from?.id}`);

  } catch (error) {
    logger.error(`Error executing reopen for session ${sessionId}:`, error);
    await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç–∫–∞—Ç–∞.');
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞ Player Pairs
async function rollbackPlayerPairs(tx: any, playerIds: number[], resultType: 'win' | 'loss'): Promise<void> {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ
  for (let i = 0; i < playerIds.length; i++) {
    for (let j = i + 1; j < playerIds.length; j++) {
      const [p1, p2] = [playerIds[i], playerIds[j]].sort((a, b) => a - b);
      
      const pair = await tx.playerPair.findUnique({
        where: { 
          player1Id_player2Id: { player1Id: p1, player2Id: p2 }
        }
      });

      if (pair && pair.gamesPlayed > 0) {
        const newGamesPlayed = pair.gamesPlayed - 1;
        const newWins = resultType === 'win' ? Math.max(0, pair.wins - 1) : pair.wins;
        const newLosses = resultType === 'loss' ? Math.max(0, pair.losses - 1) : pair.losses;
        const newWinRate = newGamesPlayed > 0 ? newWins / newGamesPlayed : 0;

        await tx.playerPair.update({
          where: { 
            player1Id_player2Id: { player1Id: p1, player2Id: p2 }
          },
          data: {
            gamesPlayed: newGamesPlayed,
            wins: newWins,
            losses: newLosses,
            winRate: newWinRate
          }
        });
      }
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–∫–∞—Ç–∞
export const handleCancelReopen = async (ctx: BotContext): Promise<void> => {
  try {
    await ctx.answerCbQuery('–û—Ç–∫–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω');
    await ctx.editMessageText('‚ùå –û—Ç–∫–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
    
    logger.info(`Reopen cancelled by admin ${ctx.from?.id}`);
  } catch (error) {
    logger.error('Error handling cancel reopen:', error);
  }
};