import { container } from 'tsyringe';
import { BotContext } from '../bot';
import { StatisticsService } from '../services/statistics.service';
import { escapeHtml } from '../utils/html';
import { safeEditOrReply } from '../utils/safe-edit';

const generateStatsMessage = async (ctx: BotContext, playerId: number) => {
  const statisticsService = container.resolve(StatisticsService);
  const stats = await statisticsService.getPlayerStatistics(playerId);

  if (!stats) {
    return {
      message: '‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.',
      keyboard: [[{ text: '‚ùé –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_menu' }]],
    };
  }

  const escapedName = escapeHtml(stats.player.firstName);
  const username = stats.player.username ? `@${stats.player.username}` : '';

  let message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞</b>\n\n`;
  message += `üë§ <b>–ò–≥—Ä–æ–∫:</b> ${escapedName} ${username}\n\n`;

  // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  message += `üéÆ <b>–ò–≥—Ä—ã:</b> ${stats.gamesPlayed}\n`;
  message += `üèÜ <b>–ü–æ–±–µ–¥—ã:</b> ${stats.wins}\n`;
  message += `üíî <b>–ü–æ—Ä–∞–∂–µ–Ω–∏—è:</b> ${stats.losses}\n`;
  
  if (stats.draws > 0) {
    message += `ü§ù <b>–ù–∏—á—å–∏:</b> ${stats.draws}\n`;
  }

  if (stats.gamesPlayed > 0) {
    message += `üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:</b> ${stats.winRate.toFixed(1)}%\n\n`;
  } else {
    message += `\n`;
  }

  // –†–µ–π—Ç–∏–Ω–≥–∏
  message += `üßÆ <b>TrueSkill:</b> ${stats.currentTSRating}\n\n`;

  // –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä
  if (stats.ratingHistory.length > 0) {
    message += `üìö <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã:</b>\n`;
    stats.ratingHistory.slice(0, 5).forEach((game, index) => {
      const date = game.date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
      });
      const deltaSymbol = game.delta > 0 ? 'üìà' : game.delta < 0 ? 'üìâ' : '‚û°Ô∏è';
      message += `${deltaSymbol} ${date} vs ${game.opponent}\n`;
    });
  }

  if (stats.gamesPlayed === 0) {
    message += `\nüéØ <b>–°—ã–≥—Ä–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!</b>`;
  }

  const keyboard = [
    [{ text: 'üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', callback_data: 'top_players' }],
    [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_stats' }, { text: '‚ùé –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_menu' }],
  ];

  return { message, keyboard };
};

export const statsCommand = async (ctx: BotContext): Promise<void> => {
  try {
    const player = await ctx.playerService.getPlayer(ctx.from!.id);

    if (!player) {
      await ctx.reply(
        '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
        {
          reply_markup: {
            inline_keyboard: [[{ text: 'üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data: 'start_registration' }]],
          },
        }
      );
      return;
    }

    const { message, keyboard } = await generateStatsMessage(ctx, player.id);

    await safeEditOrReply(ctx, message, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: keyboard,
      },
    });

  } catch (error) {
    console.error('Error in stats command:', error);
    await ctx.reply(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n' +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
    );
  }
};

export const topPlayersCommand = async (ctx: BotContext): Promise<void> => {
  try {
    const statisticsService = container.resolve(StatisticsService);
    const topPlayers = await statisticsService.getTopPlayers(10);

    if (topPlayers.length === 0) {
      await ctx.editMessageText(
        'üìä <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤</b>\n\n' +
        '‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–≥—Ä –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.\n\n' +
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 3 —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã.',
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', callback_data: 'refresh_stats' }],
              [{ text: '‚ùé –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_menu' }],
            ],
          },
        }
      );
      await ctx.answerCbQuery();
      return;
    }

    let message = `üèÜ <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ TrueSkill</b>\n\n`;

    topPlayers.forEach((playerStat, index) => {
      const escapedName = escapeHtml(playerStat.player.firstName);
      const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
      
      message += `${medal} ${escapedName}\n`;
      message += `   üßÆ ${playerStat.tsRating.toFixed(1)} | `;
      message += `üéÆ ${playerStat.gamesPlayed} –∏–≥—Ä | `;
      message += `üìà ${playerStat.winRate.toFixed(1)}%\n\n`;
    });

    message += `\nüí° <i>–†–µ–π—Ç–∏–Ω–≥ —É—á–∏—Ç—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å –º–∏–Ω–∏–º—É–º 3 –∏–≥—Ä–∞–º–∏</i>`;

    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', callback_data: 'refresh_stats' }],
          [{ text: '‚ùé –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_menu' }],
        ],
      },
    });
    await ctx.answerCbQuery();

  } catch (error) {
    console.error('Error in top players command:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤', { show_alert: true });
  }
};