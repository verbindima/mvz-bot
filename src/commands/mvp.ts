import { container } from 'tsyringe';
import { BotContext } from '../bot';
import { CONFIG, MESSAGES } from '../config';
import { RatingService } from '../services/rating.service';
import { TeamPlayerService } from '../services/team-player.service';
import { StatisticsService } from '../services/statistics.service';
import { prisma } from '../utils/database';

export const mvpCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.reply(MESSAGES.ACCESS_DENIED);
      return;
    }

    const text = ('text' in ctx.message! && ctx.message.text) ? ctx.message.text.replace('/mvp ', '') : '';
    const args = text.split(' ').filter(Boolean);
    
    if (args.length === 0 || args.length > 2) {
      await ctx.reply(
        '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mvp @username1 [@username2]\n\n' +
        '–ú–∞–∫—Å–∏–º—É–º 2 MVP (–ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã).\n' +
        '–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –¥–≤—É—Ö.'
      );
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const { week, year } = require('../utils/week').getCurrentWeek();
    const gameSession = await prisma.gameSession.findUnique({
      where: { week_year: { week, year } },
    });

    if (!gameSession || !gameSession.isConfirmed) {
      await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è MVP');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
    const matchResult = await prisma.matchResult.findUnique({
      where: { gameSessionId: gameSession.id }
    });

    if (!matchResult) {
      await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –∫–æ–º–∞–Ω–¥–æ–π /result');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥
    const teamPlayerService = container.resolve(TeamPlayerService);
    const teamComposition = await teamPlayerService.getTeamComposition(gameSession.id);

    if (!teamComposition) {
      await ctx.reply('‚ùå –°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ username
    const mvpPlayers: { id: number; username: string; team: string }[] = [];
    
    for (const usernameArg of args) {
      const username = usernameArg.replace('@', '');
      
      // –ò—â–µ–º –≤ –∫–æ–º–∞–Ω–¥–µ A
      const playerA = teamComposition.teamA.find(p => p.username === username);
      if (playerA) {
        mvpPlayers.push({ id: playerA.id, username, team: 'A' });
        continue;
      }

      // –ò—â–µ–º –≤ –∫–æ–º–∞–Ω–¥–µ B
      const playerB = teamComposition.teamB.find(p => p.username === username);
      if (playerB) {
        mvpPlayers.push({ id: playerB.id, username, team: 'B' });
        continue;
      }

      await ctx.reply(`‚ùå –ò–≥—Ä–æ–∫ @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–∞–≤–∞—Ö –∫–æ–º–∞–Ω–¥`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ MVP –Ω–∞ –∫–æ–º–∞–Ω–¥—É
    const teamAMvp = mvpPlayers.filter(p => p.team === 'A').length;
    const teamBMvp = mvpPlayers.filter(p => p.team === 'B').length;
    
    if (teamAMvp > 1 || teamBMvp > 1) {
      await ctx.reply('‚ùå –ú–∞–∫—Å–∏–º—É–º –æ–¥–∏–Ω MVP –Ω–∞ –∫–æ–º–∞–Ω–¥—É');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∏ –ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã MVP –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞
    const existingMvpEvents = await prisma.ratingEvent.findMany({
      where: {
        reason: 'mvp',
        createdAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        }
      },
      include: {
        player: true
      }
    });

    if (existingMvpEvents.length > 0) {
      const existingMvpNames = existingMvpEvents.map(e => e.player.firstName).join(', ');
      await ctx.reply(`‚ö†Ô∏è MVP —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã: ${existingMvpNames}\n\n–ú–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –º–∞—Ç—á.`);
      return;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º MVP –±–æ–Ω—É—Å—ã
    const mvpIds = mvpPlayers.map(p => p.id);
    
    await prisma.$transaction([
      // –û–±–Ω–æ–≤–ª—è–µ–º Œº —Ä–µ–π—Ç–∏–Ω–≥ MVP –∏–≥—Ä–æ–∫–æ–≤
      ...mvpIds.map(id =>
        prisma.player.update({
          where: { id },
          data: {
            tsMu: { increment: CONFIG.RATING_MVP_MU_BONUS },
            mvpCount: { increment: 1 }
          }
        })
      ),
      // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è MVP
      ...mvpIds.map(id => {
        const mvpPlayer = mvpPlayers.find(p => p.id === id)!;
        return prisma.ratingEvent.create({
          data: {
            playerId: id,
            muBefore: 0, // –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            muAfter: 0,  // –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            sigmaBefore: 0,
            sigmaAfter: 0,
            reason: 'mvp',
            meta: {
              bonus: CONFIG.RATING_MVP_MU_BONUS,
              team: mvpPlayer.team,
              matchId: gameSession.id
            }
          }
        });
      })
    ]);

    const mvpNames = mvpPlayers.map(p => `@${p.username} (–∫–æ–º–∞–Ω–¥–∞ ${gameSession.teamA && p.team === 'A' ? gameSession.teamA : gameSession.teamB})`).join(', ');
    
    await ctx.reply(
      `üèÜ MVP –Ω–∞–∑–Ω–∞—á–µ–Ω—ã: ${mvpNames}\n\n` +
      `üí´ –ë–æ–Ω—É—Å: +${CONFIG.RATING_MVP_MU_BONUS} –∫ —Ä–µ–π—Ç–∏–Ω–≥—É –∫–∞–∂–¥–æ–º—É`
    );

  } catch (error) {
    console.error('Error in mvp command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ MVP.');
  }
};