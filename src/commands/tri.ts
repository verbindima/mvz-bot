import { container } from 'tsyringe';
import { BotContext } from '../bot';
import { CONFIG, MESSAGES } from '../config';
import { TeamService } from '../services/team.service';
import { TeamPlayerService } from '../services/team-player.service';
import { RatingService } from '../services/rating.service';
import { StatisticsService } from '../services/statistics.service';
import { checkAdminPrivateOnly } from '../utils/chat';
import { prisma } from '../utils/database';
import { getCurrentWeek } from '../utils/week';
import { logger } from '../utils/logger';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
interface TriMatchResult {
  t1: string;
  t2: string;
  s1: number;
  s2: number;
  winner: string | null;
}

export const triInitCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    if (!CONFIG.TRI_MODE_ENABLED) {
      await ctx.reply('‚ùå –†–µ–∂–∏–º —Ç—Ä—ë—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
      return;
    }

    const { week, year } = getCurrentWeek();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–µ—Å—Å–∏—è (–ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞)
    const existingOpenSession = await prisma.gameSession.findFirst({
      where: {
        isClosed: false,
        isConfirmed: true
      }
    });

    if (existingOpenSession) {
      const formatName = existingOpenSession.format === 'DUO' ? '2√ó8' : '3√ó8';
      await ctx.reply(`‚ùå –£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –∏–≥—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${formatName}. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π TRI —Å–µ—Å—Å–∏–∏.`);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ–¥–µ–ª–∏
    const { main } = await ctx.gameService.getWeekPlayers();

    if (main.length < 24) {
      await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è TRI —Ä–µ–∂–∏–º–∞ (${main.length}/24)\n\n–î–ª—è —Ä–µ–∂–∏–º–∞ —Ç—Ä—ë—Ö –∫–æ–º–∞–Ω–¥ –Ω—É–∂–Ω–æ —Ä–æ–≤–Ω–æ 24 –∏–≥—Ä–æ–∫–∞.`);
      return;
    }

    if (main.length > 24) {
      await ctx.reply(`‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è TRI —Ä–µ–∂–∏–º–∞ (${main.length}/24)\n\n–î–ª—è —Ä–µ–∂–∏–º–∞ —Ç—Ä—ë—Ö –∫–æ–º–∞–Ω–¥ –Ω—É–∂–Ω–æ —Ä–æ–≤–Ω–æ 24 –∏–≥—Ä–æ–∫–∞.`);
      return;
    }

    await ctx.reply('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ 8 –∏–≥—Ä–æ–∫–æ–≤...');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã
    const teamService = container.resolve(TeamService);
    const balance = await teamService.generateThreeTeams(main);

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    const gameSession = await prisma.gameSession.upsert({
      where: { week_year: { week, year } },
      update: {
        format: 'TRI',
        teamA: 'üî¥ –ö—Ä–∞—Å–Ω–∞—è',
        teamB: 'üîµ –°–∏–Ω—è—è',
        teamC: 'üü¢ –ó–µ–ª—ë–Ω–∞—è',
        isInitialized: true,
        isConfirmed: false
      },
      create: {
        week,
        year,
        format: 'TRI',
        teamA: 'üî¥ –ö—Ä–∞—Å–Ω–∞—è',
        teamB: 'üîµ –°–∏–Ω—è—è',
        teamC: 'üü¢ –ó–µ–ª—ë–Ω–∞—è',
        isInitialized: true,
        isConfirmed: false
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥
    const teamPlayerService = container.resolve(TeamPlayerService);
    await teamPlayerService.saveThreeTeamComposition(
      gameSession.id,
      balance.teamA.players,
      balance.teamB.players,
      balance.teamC.players
    );

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = teamService.formatThreeTeamsMessage(balance, {
      teamA: 'üî¥ –ö—Ä–∞—Å–Ω–∞—è',
      teamB: 'üîµ –°–∏–Ω—è—è',
      teamC: 'üü¢ –ó–µ–ª—ë–Ω–∞—è'
    });

    await ctx.reply(
      `‚öΩ <b>–ö–æ–º–∞–Ω–¥—ã TRI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n${message}\n\n` +
      `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_confirm –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–æ–≤`,
      { parse_mode: 'HTML' }
    );

    logger.info(`TRI teams generated for session ${gameSession.id} by admin ${ctx.from?.id}`);

  } catch (error) {
    logger.error('Error in tri_init command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TRI –∫–æ–º–∞–Ω–¥.');
  }
};

export const triConfirmCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    if (!CONFIG.TRI_MODE_ENABLED) {
      await ctx.reply('‚ùå –†–µ–∂–∏–º —Ç—Ä—ë—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
      return;
    }

    // –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é TRI —Å–µ—Å—Å–∏—é
    const gameSession = await prisma.gameSession.findFirst({
      where: {
        format: 'TRI',
        isInitialized: true,
        isClosed: false
      },
      orderBy: { createdAt: 'desc' }
    });

    if (!gameSession) {
      await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ—Ç–∫—Ä—ã—Ç–æ–π TRI —Å–µ—Å—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_init –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.');
      return;
    }

    if (!gameSession.isInitialized) {
      await ctx.reply('‚ùå TRI —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_init.');
      return;
    }

    if (gameSession.isConfirmed) {
      await ctx.reply('‚úÖ TRI –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã.');
      return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ—Å—Ç–∞–≤—ã
    await prisma.gameSession.update({
      where: { id: gameSession.id },
      data: { isConfirmed: true }
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤—ã –¥–ª—è –ø–æ–∫–∞–∑–∞
    const teamPlayerService = container.resolve(TeamPlayerService);
    const composition = await teamPlayerService.getThreeTeamComposition(gameSession.id);

    if (!composition) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥.');
      return;
    }

    const teamService = container.resolve(TeamService);
    const teamBalance = {
      teamA: { players: composition.teamA, totalRating: 0, averageRating: 0 },
      teamB: { players: composition.teamB, totalRating: 0, averageRating: 0 },
      teamC: { players: composition.teamC, totalRating: 0, averageRating: 0 },
      maxDifference: 0,
      avgDifference: 0
    };

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
    teamBalance.teamA.totalRating = composition.teamA.reduce((sum, p) => sum + teamService.getPlayerWeight(p), 0);
    teamBalance.teamA.averageRating = teamBalance.teamA.totalRating / composition.teamA.length;

    teamBalance.teamB.totalRating = composition.teamB.reduce((sum, p) => sum + teamService.getPlayerWeight(p), 0);
    teamBalance.teamB.averageRating = teamBalance.teamB.totalRating / composition.teamB.length;

    teamBalance.teamC.totalRating = composition.teamC.reduce((sum, p) => sum + teamService.getPlayerWeight(p), 0);
    teamBalance.teamC.averageRating = teamBalance.teamC.totalRating / composition.teamC.length;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ—Å—Ç–∏
    const weights = [teamBalance.teamA.totalRating, teamBalance.teamB.totalRating, teamBalance.teamC.totalRating];
    teamBalance.maxDifference = Math.max(...weights) - Math.min(...weights);
    const avgWeight = weights.reduce((sum, w) => sum + w, 0) / weights.length;
    teamBalance.avgDifference = weights.reduce((sum, w) => sum + Math.abs(w - avgWeight), 0) / weights.length;

    const message = teamService.formatThreeTeamsMessage(teamBalance, {
      teamA: 'üî¥ –ö—Ä–∞—Å–Ω–∞—è',
      teamB: 'üîµ –°–∏–Ω—è—è',
      teamC: 'üü¢ –ó–µ–ª—ë–Ω–∞—è'
    });

    await ctx.reply(
      `‚úÖ <b>TRI –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!</b>\n\n${message}\n\n` +
      `üéÆ –ö–æ–º–∞–Ω–¥—ã –≥–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "winner stays"\n` +
      `üìù –ü–æ—Å–ª–µ –º–∞—Ç—á–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_results –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`,
      { parse_mode: 'HTML' }
    );

    logger.info(`TRI teams confirmed for session ${gameSession.id} by admin ${ctx.from?.id}`);

  } catch (error) {
    logger.error('Error in tri_confirm command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ TRI –∫–æ–º–∞–Ω–¥.');
  }
};

export const triCancelCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    // –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é TRI —Å–µ—Å—Å–∏—é
    const gameSession = await prisma.gameSession.findFirst({
      where: {
        format: 'TRI',
        isClosed: false
      },
      orderBy: { createdAt: 'desc' }
    });

    if (!gameSession) {
      await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π TRI —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
      return;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ —á–µ—Ä–Ω–æ–≤–∏–∫
    await prisma.gameSession.update({
      where: { id: gameSession.id },
      data: {
        isConfirmed: false,
        isInitialized: false
      }
    });

    await ctx.reply(
      'üîÑ TRI —Å–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫.\n\n' +
      'üí° –°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_init –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ /tri_confirm –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Å–æ—Å—Ç–∞–≤–æ–≤.'
    );

    logger.info(`TRI session ${gameSession.id} cancelled by admin ${ctx.from?.id}`);

  } catch (error) {
    logger.error('Error in tri_cancel command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ TRI —Å–µ—Å—Å–∏–∏.');
  }
};

// –ü–∞—Ä—Å–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
function parseTriResults(text: string): { results: TriMatchResult[]; errors: string[] } {
  const lines = text.trim().split('\n');
  const results: TriMatchResult[] = [];
  const errors: string[] = [];

  if (lines.length > CONFIG.TRI_BULK_PARSE_MAX_LINES) {
    errors.push(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å—Ç—Ä–æ–∫: ${lines.length}/${CONFIG.TRI_BULK_PARSE_MAX_LINES}`);
    return { results: [], errors };
  }

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    if (!line) continue;

    const lineNum = i + 1;

    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    let match = line.match(/^([ABC])\s+(\d+)-(\d+)\s+([ABC])$/); // A 5-3 B
    if (!match) {
      match = line.match(/^([ABC])-([ABC])\s+(\d+):(\d+)$/); // A-B 5:3
      if (match) {
        match = [match[0], match[1], match[3], match[4], match[2]]; // –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
      }
    }
    if (!match) {
      match = line.match(/^([ABC])([ABC])\s+(\d+)\s+(\d+)$/); // AB 5 3
      if (match) {
        match = [match[0], match[1], match[3], match[4], match[2]]; // –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º
      }
    }

    if (!match) {
      errors.push(`–°—Ç—Ä–æ–∫–∞ ${lineNum}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å "${line}"`);
      continue;
    }

    const t1 = match[1];
    const s1 = parseInt(match[2]);
    const s2 = parseInt(match[3]);
    const t2 = match[4];

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!['A', 'B', 'C'].includes(t1) || !['A', 'B', 'C'].includes(t2)) {
      errors.push(`–°—Ç—Ä–æ–∫–∞ ${lineNum}: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã "${t1}" –∏ "${t2}"`);
      continue;
    }

    if (t1 === t2) {
      errors.push(`–°—Ç—Ä–æ–∫–∞ ${lineNum}: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å —Å–∞–º–∞ —Å —Å–æ–±–æ–π`);
      continue;
    }

    if (s1 < 0 || s2 < 0) {
      errors.push(`–°—Ç—Ä–æ–∫–∞ ${lineNum}: —Å—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º`);
      continue;
    }

    const winner = s1 > s2 ? t1 : s2 > s1 ? t2 : null;

    results.push({ t1, t2, s1, s2, winner });
  }

  return { results, errors };
}

export const triBulkAddCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    if (!CONFIG.TRI_MODE_ENABLED) {
      await ctx.reply('‚ùå –†–µ–∂–∏–º —Ç—Ä—ë—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    let playersText = '';
    if (ctx.message && 'text' in ctx.message) {
      playersText = ctx.message.text?.replace('/tri_bulk_add', '').trim() || '';
    }

    if (!playersText) {
      await ctx.reply(
        '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤.\n\n' +
        'üìù <b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:</b>\n' +
        '<code>/tri_bulk_add\n' +
        '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n' +
        '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–º–∏—Ä–Ω–æ–≤\n' +
        '@username\n' +
        '...(–¥–æ 24 —Å—Ç—Ä–æ–∫)</code>\n\n' +
        'üí° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n' +
        '‚Ä¢ –ü–æ–ª–Ω–æ–µ –∏–º—è (–∏—â–µ—Ç—Å—è –ø–æ firstName)\n' +
        '‚Ä¢ @username (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω)\n' +
        '‚Ä¢ ID Telegram (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω)\n\n' +
        'üÜï <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b>\n' +
        '–ù–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ (–ø–æ @username –∏ telegram ID) –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –±–∞–∑–æ–≤—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º',
        { parse_mode: 'HTML' }
      );
      return;
    }

    const lines = playersText.trim().split('\n').filter(line => line.trim());

    if (lines.length === 0) {
      await ctx.reply('‚ùå –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç.');
      return;
    }

    if (lines.length > 24) {
      await ctx.reply(`‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ (${lines.length}/24). –î–ª—è TRI —Ä–µ–∂–∏–º–∞ –º–∞–∫—Å–∏–º—É–º 24 –∏–≥—Ä–æ–∫–∞.`);
      return;
    }

    await ctx.reply(`üîÑ –ò—â—É –∏ –¥–æ–±–∞–≤–ª—è—é ${lines.length} –∏–≥—Ä–æ–∫(–æ–≤)...`);

    const { week, year } = getCurrentWeek();
    const addedPlayers: string[] = [];
    const notFoundPlayers: string[] = [];
    const alreadyJoined: string[] = [];
    const autoRegistered: string[] = [];

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    const currentEntries = await prisma.weekEntry.findMany({
      where: { week, year },
      include: { player: true }
    });

    const currentPlayerIds = new Set(currentEntries.map(e => e.player.id));

    for (let i = 0; i < lines.length; i++) {
      const playerInput = lines[i].trim();
      if (!playerInput) continue;

      try {
        let player = null;

        // –ü–æ–∏—Å–∫ –ø–æ username (@username)
        if (playerInput.startsWith('@')) {
          const username = playerInput.slice(1);
          player = await prisma.player.findFirst({
            where: { username }
          });
        }
        // –ü–æ–∏—Å–∫ –ø–æ Telegram ID (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞)
        else if (/^\d+$/.test(playerInput)) {
          const telegramId = BigInt(playerInput);
          player = await prisma.player.findUnique({
            where: { telegramId }
          });
        }
        // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ (firstName —Å–æ–¥–µ—Ä–∂–∏—Ç)
        else {
          player = await prisma.player.findFirst({
            where: {
              firstName: {
                contains: playerInput,
                mode: 'insensitive'
              }
            }
          });
        }

        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
        let isAutoRegistered = false;
        if (!player) {
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ username –∏ telegram ID
          if (playerInput.startsWith('@')) {
            const username = playerInput.slice(1);
            try {
              player = await prisma.player.create({
                data: {
                  telegramId: BigInt(Date.now()), // –í—Ä–µ–º–µ–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                  username: username,
                  firstName: username, // –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∫–∞–∫ –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                  tsMu: 25,
                  tsSigma: 8.333,
                  isAdmin: false
                }
              });
              autoRegistered.push(`@${username} (–Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫)`);
              isAutoRegistered = true;
              logger.info(`Auto-registered player with username: ${username}`);
            } catch (error) {
              logger.error(`Failed to auto-register player with username ${username}:`, error);
              notFoundPlayers.push(playerInput);
              continue;
            }
          }
          else if (/^\d+$/.test(playerInput)) {
            const telegramId = BigInt(playerInput);
            try {
              player = await prisma.player.create({
                data: {
                  telegramId: telegramId,
                  username: null,
                  firstName: `ID${playerInput}`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–∫ –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                  tsMu: 25,
                  tsSigma: 8.333,
                  isAdmin: false
                }
              });
              autoRegistered.push(`ID${playerInput} (–Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫)`);
              isAutoRegistered = true;
              logger.info(`Auto-registered player with telegram ID: ${telegramId}`);
            } catch (error) {
              logger.error(`Failed to auto-register player with telegram ID ${telegramId}:`, error);
              notFoundPlayers.push(playerInput);
              continue;
            }
          }
          else {
            // –ü–æ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
            notFoundPlayers.push(playerInput);
            continue;
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –∏–≥—Ä–æ–∫
        if (currentPlayerIds.has(player.id)) {
          alreadyJoined.push(`${player.firstName} (@${player.username || 'no_username'})`);
          continue;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤
        await prisma.weekEntry.create({
          data: {
            week,
            year,
            playerId: player.id,
            state: 'MAIN',
            isPaid: false
          }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫
        if (isAutoRegistered) {
          // –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ autoRegistered –≤—ã—à–µ
        } else {
          addedPlayers.push(`${player.firstName} (@${player.username || 'no_username'})`);
        }
        currentPlayerIds.add(player.id);

      } catch (error) {
        logger.error(`Error adding player "${playerInput}":`, error);
        notFoundPlayers.push(playerInput);
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    let reportMessage = `‚úÖ <b>–ü–∞–∫–µ—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n`;

    if (addedPlayers.length > 0) {
      reportMessage += `‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ (${addedPlayers.length}):</b>\n`;
      addedPlayers.forEach((player, i) => {
        reportMessage += `${i + 1}. ${player}\n`;
      });
      reportMessage += '\n';
    }

    if (autoRegistered.length > 0) {
      reportMessage += `üÜï <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã (${autoRegistered.length}):</b>\n`;
      autoRegistered.forEach((player, i) => {
        reportMessage += `${i + 1}. ${player}\n`;
      });
      reportMessage += '\n';
    }

    if (alreadyJoined.length > 0) {
      reportMessage += `‚ÑπÔ∏è <b>–£–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã (${alreadyJoined.length}):</b>\n`;
      alreadyJoined.forEach((player, i) => {
        reportMessage += `${i + 1}. ${player}\n`;
      });
      reportMessage += '\n';
    }

    if (notFoundPlayers.length > 0) {
      reportMessage += `‚ùå <b>–ù–µ –Ω–∞–π–¥–µ–Ω—ã (${notFoundPlayers.length}):</b>\n`;
      notFoundPlayers.forEach((player, i) => {
        reportMessage += `${i + 1}. ${player}\n`;
      });
      reportMessage += '\n';
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const { main } = await ctx.gameService.getWeekPlayers();
    const totalPlayers = main.length;
    const needed = Math.max(0, 24 - totalPlayers);

    reportMessage += `üìä <b>–ò—Ç–æ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–æ:</b> ${totalPlayers}/24\n`;
    if (needed > 0) {
      reportMessage += `üéØ <b>–ù—É–∂–Ω–æ –µ—â–µ:</b> ${needed} –∏–≥—Ä–æ–∫(–æ–≤)`;
    } else {
      reportMessage += `üî• <b>TRI —Å–æ—Å—Ç–∞–≤ –ø–æ–ª–Ω—ã–π! –ú–æ–∂–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã</b>`;
    }

    await ctx.reply(reportMessage, { parse_mode: 'HTML' });

    logger.info(`Bulk add completed: ${addedPlayers.length} added, ${autoRegistered.length} auto-registered, ${alreadyJoined.length} already joined, ${notFoundPlayers.length} not found by admin ${ctx.from?.id}`);

  } catch (error) {
    logger.error('Error in tri_bulk_add command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤.');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
export const refreshTriEditInterface = async (ctx: BotContext, addTimestamp: boolean = false): Promise<void> => {
  try {
    // –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é TRI —Å–µ—Å—Å–∏—é
    const gameSession = await prisma.gameSession.findFirst({
      where: {
        format: 'TRI',
        isInitialized: true,
        isClosed: false
      },
      orderBy: { createdAt: 'desc' }
    });

    if (!gameSession) {
      await ctx.editMessageText('‚ùå TRI —Å–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥
    const teamPlayerService = container.resolve(TeamPlayerService);
    const composition = await teamPlayerService.getThreeTeamComposition(gameSession.id);

    if (!composition) {
      await ctx.editMessageText('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥.');
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ —Å–æ—Å—Ç–∞–≤–∞–º–∏
    const teamService = container.resolve(TeamService);

    const teamAWeight = composition.teamA.reduce((sum, p) => sum + teamService.getPlayerWeight(p), 0);
    const teamBWeight = composition.teamB.reduce((sum, p) => sum + teamService.getPlayerWeight(p), 0);
    const teamCWeight = composition.teamC.reduce((sum, p) => sum + teamService.getPlayerWeight(p), 0);

    const maxWeight = Math.max(teamAWeight, teamBWeight, teamCWeight);
    const minWeight = Math.min(teamAWeight, teamBWeight, teamCWeight);
    const difference = maxWeight - minWeight;

    const formatTeam = (players: any[], teamName: string, weight: number) => {
      const playersStr = players.map((p, i) => {
        const rating = teamService.getPlayerWeight(p).toFixed(1);
        return `${i + 1}. ${p.firstName} ‚Äî ${rating}`;
      }).join('\n');
      return `<b>${teamName}</b> (${weight.toFixed(1)}):\n${playersStr}`;
    };

    let message = `‚öΩ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TRI —Å–æ—Å—Ç–∞–≤–æ–≤</b>\n\n`;
    message += formatTeam(composition.teamA, 'üî¥ –ö—Ä–∞—Å–Ω–∞—è', teamAWeight) + '\n\n';
    message += formatTeam(composition.teamB, 'üîµ –°–∏–Ω—è—è', teamBWeight) + '\n\n';
    message += formatTeam(composition.teamC, 'üü¢ –ó–µ–ª—ë–Ω–∞—è', teamCWeight) + '\n\n';

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è—Ö
    message += `üìä <b>–ë–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥:</b>\n`;
    message += `‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å–∏–ª–µ (–º–∞–∫—Å-–º–∏–Ω): ${difference.toFixed(2)} Œº\n`;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç—Ä–µ—Ö –∫–æ–º–∞–Ω–¥
    const totalWeight = teamAWeight + teamBWeight + teamCWeight;
    const probA = (teamAWeight / totalWeight * 100);
    const probB = (teamBWeight / totalWeight * 100);
    const probC = (teamCWeight / totalWeight * 100);

    message += `‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª—ã:\n`;
    message += `  üî¥ ${probA.toFixed(1)}% | üîµ ${probB.toFixed(1)}% | üü¢ ${probC.toFixed(1)}%\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å")
    if (addTimestamp) {
      const now = new Date();
      message += `üîÑ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit', second: '2-digit' })}</i>\n\n`;
    }

    message += `üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const keyboard = [
      [
        { text: 'üî¥‚Üíüîµ A‚ÜíB', callback_data: 'tri_move_A_B' },
        { text: 'üî¥‚Üíüü¢ A‚ÜíC', callback_data: 'tri_move_A_C' }
      ],
      [
        { text: 'üîµ‚Üíüî¥ B‚ÜíA', callback_data: 'tri_move_B_A' },
        { text: 'üîµ‚Üíüü¢ B‚ÜíC', callback_data: 'tri_move_B_C' }
      ],
      [
        { text: 'üü¢‚Üíüî¥ C‚ÜíA', callback_data: 'tri_move_C_A' },
        { text: 'üü¢‚Üíüîµ C‚ÜíB', callback_data: 'tri_move_C_B' }
      ],
      [
        { text: 'üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å', callback_data: 'tri_regenerate' },
        { text: '‚ôªÔ∏è –ê–≤—Ç–æ-–±–∞–ª–∞–Ω—Å', callback_data: 'tri_auto_balance' }
      ],
      [
        { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: 'tri_accept_edit' },
        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'tri_cancel_edit' }
      ]
    ];

    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (error: any) {
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (error?.response?.error_code === 400 &&
        error?.response?.description?.includes('message is not modified')) {
      throw error;
    }

    logger.error('Error in refreshTriEditInterface:', error);

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
    try {
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    } catch {
      // –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      logger.error('Failed to show error message in TRI edit interface');
    }
  }
};

export const triEditCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    if (!CONFIG.TRI_MODE_ENABLED) {
      await ctx.reply('‚ùå –†–µ–∂–∏–º —Ç—Ä—ë—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
      return;
    }

    // –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é TRI —Å–µ—Å—Å–∏—é
    const gameSession = await prisma.gameSession.findFirst({
      where: {
        format: 'TRI',
        isInitialized: true,
        isClosed: false
      },
      orderBy: { createdAt: 'desc' }
    });

    if (!gameSession) {
      await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ—Ç–∫—Ä—ã—Ç–æ–π TRI —Å–µ—Å—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_init –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥
    const teamPlayerService = container.resolve(TeamPlayerService);
    const composition = await teamPlayerService.getThreeTeamComposition(gameSession.id);

    if (!composition) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥.');
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ —Å–æ—Å—Ç–∞–≤–∞–º–∏
    const teamService = container.resolve(TeamService);

    const teamAWeight = composition.teamA.reduce((sum, p) => sum + teamService.getPlayerWeight(p), 0);
    const teamBWeight = composition.teamB.reduce((sum, p) => sum + teamService.getPlayerWeight(p), 0);
    const teamCWeight = composition.teamC.reduce((sum, p) => sum + teamService.getPlayerWeight(p), 0);

    const maxWeight = Math.max(teamAWeight, teamBWeight, teamCWeight);
    const minWeight = Math.min(teamAWeight, teamBWeight, teamCWeight);
    const difference = maxWeight - minWeight;

    const formatTeam = (players: any[], teamName: string, weight: number) => {
      const playersStr = players.map((p, i) => {
        const rating = teamService.getPlayerWeight(p).toFixed(1);
        return `${i + 1}. ${p.firstName} ‚Äî ${rating}`;
      }).join('\n');
      return `<b>${teamName}</b> (${weight.toFixed(1)}):\n${playersStr}`;
    };

    let message = `‚öΩ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TRI —Å–æ—Å—Ç–∞–≤–æ–≤</b>\n\n`;
    message += formatTeam(composition.teamA, 'üî¥ –ö—Ä–∞—Å–Ω–∞—è', teamAWeight) + '\n\n';
    message += formatTeam(composition.teamB, 'üîµ –°–∏–Ω—è—è', teamBWeight) + '\n\n';
    message += formatTeam(composition.teamC, 'üü¢ –ó–µ–ª—ë–Ω–∞—è', teamCWeight) + '\n\n';
    message += `üìä –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å–∏–ª–µ (–º–∞–∫—Å-–º–∏–Ω): ${difference.toFixed(2)} Œº\n\n`;
    message += `üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const keyboard = [
      [
        { text: 'üî¥‚Üíüîµ A‚ÜíB', callback_data: 'tri_move_A_B' },
        { text: 'üî¥‚Üíüü¢ A‚ÜíC', callback_data: 'tri_move_A_C' }
      ],
      [
        { text: 'üîµ‚Üíüî¥ B‚ÜíA', callback_data: 'tri_move_B_A' },
        { text: 'üîµ‚Üíüü¢ B‚ÜíC', callback_data: 'tri_move_B_C' }
      ],
      [
        { text: 'üü¢‚Üíüî¥ C‚ÜíA', callback_data: 'tri_move_C_A' },
        { text: 'üü¢‚Üíüîµ C‚ÜíB', callback_data: 'tri_move_C_B' }
      ],
      [
        { text: 'üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å', callback_data: 'tri_regenerate' },
        { text: '‚ôªÔ∏è –ê–≤—Ç–æ-–±–∞–ª–∞–Ω—Å', callback_data: 'tri_auto_balance' }
      ],
      [
        { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: 'tri_accept_edit' },
        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'tri_cancel_edit' }
      ]
    ];

    await ctx.reply(message, {
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard: keyboard }
    });

    logger.info(`TRI edit interface opened for session ${gameSession.id} by admin ${ctx.from?.id}`);

  } catch (error) {
    logger.error('Error in tri_edit command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ TRI —Å–æ—Å—Ç–∞–≤–æ–≤.');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
export const handleTriMove = async (ctx: BotContext, fromTeam: string, toTeam: string): Promise<void> => {
  try {
    // –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é TRI —Å–µ—Å—Å–∏—é
    const gameSession = await prisma.gameSession.findFirst({
      where: {
        format: 'TRI',
        isInitialized: true,
        isClosed: false
      },
      orderBy: { createdAt: 'desc' }
    });

    if (!gameSession) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π TRI —Å–µ—Å—Å–∏–∏');
      return;
    }

    const teamPlayerService = container.resolve(TeamPlayerService);
    const composition = await teamPlayerService.getThreeTeamComposition(gameSession.id);

    if (!composition) {
      await ctx.answerCbQuery('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
    let sourceTeam: any[] = [];
    if (fromTeam === 'A') sourceTeam = composition.teamA;
    else if (fromTeam === 'B') sourceTeam = composition.teamB;
    else if (fromTeam === 'C') sourceTeam = composition.teamC;

    if (sourceTeam.length === 0) {
      await ctx.answerCbQuery('‚ùå –í –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    const keyboard = sourceTeam.map((player, index) => [
      {
        text: `${index + 1}. ${player.firstName}`,
        callback_data: `tri_move_player_${fromTeam}_${toTeam}_${player.id}`
      }
    ]);
    keyboard.push([{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'tri_edit_back' }]);

    const teamNames = { A: 'üî¥ –ö—Ä–∞—Å–Ω–∞—è', B: 'üîµ –°–∏–Ω—è—è', C: 'üü¢ –ó–µ–ª—ë–Ω–∞—è' };
    const message = `üë§ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è</b>\n\n` +
      `–ò–∑ –∫–æ–º–∞–Ω–¥—ã: ${teamNames[fromTeam as keyof typeof teamNames]}\n` +
      `–í –∫–æ–º–∞–Ω–¥—É: ${teamNames[toTeam as keyof typeof teamNames]}`;

    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard: keyboard }
    });

    await ctx.answerCbQuery();

  } catch (error) {
    logger.error('Error in handleTriMove:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–≥—Ä–æ–∫–∞');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
export const executeTriPlayerMove = async (ctx: BotContext, fromTeam: string, toTeam: string, playerId: number): Promise<void> => {
  try {
    // –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é TRI —Å–µ—Å—Å–∏—é
    const gameSession = await prisma.gameSession.findFirst({
      where: {
        format: 'TRI',
        isInitialized: true,
        isClosed: false
      },
      orderBy: { createdAt: 'desc' }
    });

    if (!gameSession) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π TRI —Å–µ—Å—Å–∏–∏');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
    const player = await prisma.player.findUnique({
      where: { id: playerId }
    });

    if (!player) {
      await ctx.answerCbQuery('‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ TeamPlayer
    await prisma.teamPlayer.updateMany({
      where: {
        gameSessionId: gameSession.id,
        playerId: playerId,
        team: fromTeam
      },
      data: {
        team: toTeam
      }
    });

    await ctx.answerCbQuery(`‚úÖ ${player.firstName} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É ${toTeam}`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ)
    await refreshTriEditInterface(ctx);

    logger.info(`Player ${playerId} moved from team ${fromTeam} to team ${toTeam} in TRI session ${gameSession.id}`);

  } catch (error) {
    logger.error('Error in executeTriPlayerMove:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ç–µ–∫—É—â–∏—Ö —Å–æ—Å—Ç–∞–≤–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤)
export const handleTriRecalculate = async (ctx: BotContext): Promise<void> => {
  try {
    await ctx.answerCbQuery('üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é —Å–æ—Å—Ç–∞–≤—ã...');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π)
    await refreshTriEditInterface(ctx, true);
    logger.info(`TRI teams recalculated (display refreshed with timestamp)`);

  } catch (error) {
    logger.error('Error in handleTriRecalculate:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥
export const handleTriAutoBalance = async (ctx: BotContext): Promise<void> => {
  try {
    // –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é TRI —Å–µ—Å—Å–∏—é
    const gameSession = await prisma.gameSession.findFirst({
      where: {
        format: 'TRI',
        isInitialized: true,
        isClosed: false
      },
      orderBy: { createdAt: 'desc' }
    });

    if (!gameSession) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π TRI —Å–µ—Å—Å–∏–∏');
      return;
    }

    const teamPlayerService = container.resolve(TeamPlayerService);
    const composition = await teamPlayerService.getThreeTeamComposition(gameSession.id);

    if (!composition) {
      await ctx.answerCbQuery('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥');
      return;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    const allPlayers = [...composition.teamA, ...composition.teamB, ...composition.teamC];

    if (allPlayers.length !== 24) {
      await ctx.answerCbQuery('‚ùå –ù–µ–ø–æ–ª–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥');
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const teamService = container.resolve(TeamService);
    const newBalance = await teamService.generateThreeTeams(allPlayers);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã
    await teamPlayerService.saveThreeTeamComposition(
      gameSession.id,
      newBalance.teamA.players,
      newBalance.teamB.players,
      newBalance.teamC.players
    );

    await ctx.answerCbQuery('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ)
    await refreshTriEditInterface(ctx);

    logger.info(`TRI teams auto-balanced for session ${gameSession.id} by admin ${ctx.from?.id}`);

  } catch (error) {
    logger.error('Error in handleTriAutoBalance:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ');
  }
};

export const triMvpCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    if (!CONFIG.TRI_MODE_ENABLED) {
      await ctx.reply('‚ùå –†–µ–∂–∏–º —Ç—Ä—ë—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
      return;
    }

    const text = ('text' in ctx.message! && ctx.message.text) ? ctx.message.text.replace('/tri_mvp', '').trim() : '';
    const args = text.split(' ').filter(Boolean);

    if (args.length === 0 || args.length > 3) {
      await ctx.reply(
        'üèÜ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ MVP –¥–ª—è TRI —Ä–µ–∂–∏–º–∞</b>\n\n' +
        '<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>/tri_mvp @username1 [@username2] [@username3]</code>\n\n' +
        '‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 MVP (–ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã)\n' +
        '‚Ä¢ –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å 1, 2 –∏–ª–∏ 3 –∏–≥—Ä–æ–∫–æ–≤\n' +
        '‚Ä¢ –ö–∞–∂–¥—ã–π MVP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ —Ä–∞–∑–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã',
        { parse_mode: 'HTML' }
      );
      return;
    }

    // –ò—â–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—É—é) TRI —Å–µ—Å—Å–∏—é
    const gameSession = await prisma.gameSession.findFirst({
      where: {
        format: 'TRI',
        isConfirmed: true
      },
      orderBy: { createdAt: 'desc' }
    });

    if (!gameSession) {
      await ctx.reply('‚ùå –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π TRI —Å–µ—Å—Å–∏–∏.');
      return;
    }

    if (!gameSession.isConfirmed) {
      await ctx.reply('‚ùå TRI –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_confirm.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥
    const teamPlayerService = container.resolve(TeamPlayerService);
    const composition = await teamPlayerService.getThreeTeamComposition(gameSession.id);

    if (!composition) {
      await ctx.reply('‚ùå –°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ username –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ö –∫–æ–º–∞–Ω–¥—ã
    const mvpPlayers: { id: number; firstName: string; username: string; team: string }[] = [];

    for (const usernameArg of args) {
      const username = usernameArg.replace('@', '');
      let found = false;

      // –ò—â–µ–º –≤ –∫–æ–º–∞–Ω–¥–µ A (–∫—Ä–∞—Å–Ω–∞—è)
      const playerA = composition.teamA.find(p => p.username === username);
      if (playerA) {
        mvpPlayers.push({ id: playerA.id, firstName: playerA.firstName, username, team: 'A' });
        found = true;
      }

      // –ò—â–µ–º –≤ –∫–æ–º–∞–Ω–¥–µ B (—Å–∏–Ω—è—è)
      if (!found) {
        const playerB = composition.teamB.find(p => p.username === username);
        if (playerB) {
          mvpPlayers.push({ id: playerB.id, firstName: playerB.firstName, username, team: 'B' });
          found = true;
        }
      }

      // –ò—â–µ–º –≤ –∫–æ–º–∞–Ω–¥–µ C (–∑–µ–ª—ë–Ω–∞—è)
      if (!found) {
        const playerC = composition.teamC.find(p => p.username === username);
        if (playerC) {
          mvpPlayers.push({ id: playerC.id, firstName: playerC.firstName, username, team: 'C' });
          found = true;
        }
      }

      if (!found) {
        await ctx.reply(`‚ùå –ò–≥—Ä–æ–∫ @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–∞–≤–∞—Ö TRI –∫–æ–º–∞–Ω–¥`);
        return;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ MVP –Ω–∞ –∫–æ–º–∞–Ω–¥—É
    const teamCounts = { A: 0, B: 0, C: 0 };
    mvpPlayers.forEach(p => teamCounts[p.team as keyof typeof teamCounts]++);

    if (teamCounts.A > 1 || teamCounts.B > 1 || teamCounts.C > 1) {
      await ctx.reply('‚ùå –ú–∞–∫—Å–∏–º—É–º –æ–¥–∏–Ω MVP –Ω–∞ –∫–æ–º–∞–Ω–¥—É');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∏ –ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã MVP –¥–ª—è —ç—Ç–æ–π TRI —Å–µ—Å—Å–∏–∏
    const existingMvpEvents = await prisma.ratingEvent.findMany({
      where: {
        reason: 'mvp',
        meta: {
          path: ['matchId'],
          equals: gameSession.id
        }
      },
      include: { player: true }
    });

    if (existingMvpEvents.length > 0) {
      const existingMvpNames = existingMvpEvents.map(e => {
        const meta = e.meta as any;
        const team = meta?.team || 'Unknown';
        return `${e.player.firstName} (${team})`;
      }).join(', ');
      await ctx.reply(`‚ö†Ô∏è MVP —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π TRI —Å–µ—Å—Å–∏–∏: ${existingMvpNames}`);
      return;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º MVP –±–æ–Ω—É—Å—ã
    const mvpIds = mvpPlayers.map(p => p.id);

    await prisma.$transaction([
      // –û–±–Ω–æ–≤–ª—è–µ–º Œº —Ä–µ–π—Ç–∏–Ω–≥ MVP –∏–≥—Ä–æ–∫–æ–≤
      ...mvpIds.map(id =>
        prisma.player.update({
          where: { id },
          data: {
            tsMu: { increment: CONFIG.RATING_MVP_MU_BONUS },
            mvpCount: { increment: 1 }
          }
        })
      ),
      // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è MVP
      ...mvpIds.map(id => {
        const mvpPlayer = mvpPlayers.find(p => p.id === id)!;
        const teamNames = { A: 'üî¥ –ö—Ä–∞—Å–Ω–∞—è', B: 'üîµ –°–∏–Ω—è—è', C: 'üü¢ –ó–µ–ª—ë–Ω–∞—è' };
        return prisma.ratingEvent.create({
          data: {
            playerId: id,
            muBefore: 0,
            muAfter: 0,
            sigmaBefore: 0,
            sigmaAfter: 0,
            reason: 'mvp',
            meta: {
              bonus: CONFIG.RATING_MVP_MU_BONUS,
              team: mvpPlayer.team,
              teamName: teamNames[mvpPlayer.team as keyof typeof teamNames],
              matchId: gameSession.id
            }
          }
        });
      })
    ]);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const teamNames = { A: 'üî¥ –ö—Ä–∞—Å–Ω–∞—è', B: 'üîµ –°–∏–Ω—è—è', C: 'üü¢ –ó–µ–ª—ë–Ω–∞—è' };
    const mvpList = mvpPlayers.map(p =>
      `${p.firstName} (@${p.username}) - ${teamNames[p.team as keyof typeof teamNames]}`
    ).join('\n');

    await ctx.reply(
      `üèÜ <b>MVP –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è TRI –∏–≥—Ä—ã:</b>\n\n${mvpList}\n\n` +
      `üí´ –ë–æ–Ω—É—Å: +${CONFIG.RATING_MVP_MU_BONUS} –∫ —Ä–µ–π—Ç–∏–Ω–≥—É –∫–∞–∂–¥–æ–º—É`,
      { parse_mode: 'HTML' }
    );

    logger.info(`TRI MVP assigned for session ${gameSession.id}: ${mvpPlayers.map(p => `${p.firstName} (${p.team})`).join(', ')} by admin ${ctx.from?.id}`);

  } catch (error) {
    logger.error('Error in tri_mvp command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ MVP.');
  }
};

export const triResultsCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    if (!CONFIG.TRI_MODE_ENABLED) {
      await ctx.reply('‚ùå –†–µ–∂–∏–º —Ç—Ä—ë—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    let resultsText = '';
    if (ctx.message && 'text' in ctx.message) {
      resultsText = ctx.message.text?.replace('/tri_results', '').trim() || '';
    }

    if (!resultsText) {
      await ctx.reply(
        '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π.\n\n' +
        'üìù <b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:</b>\n' +
        '<code>/tri_results\n' +
        'A 5-3 B\n' +
        'A 2-4 C\n' +
        'C 1-0 B</code>\n\n' +
        'üéØ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Ç—Ä–æ–∫:</b>\n' +
        '‚Ä¢ <code>A 5-3 B</code>\n' +
        '‚Ä¢ <code>A-B 5:3</code>\n' +
        '‚Ä¢ <code>AB 5 3</code>',
        { parse_mode: 'HTML' }
      );
      return;
    }

    // –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é TRI —Å–µ—Å—Å–∏—é (–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é –∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ)
    const gameSession = await prisma.gameSession.findFirst({
      where: {
        format: 'TRI',
        isConfirmed: true,
        isClosed: false
      },
      orderBy: { createdAt: 'desc' }
    });

    if (!gameSession) {
      await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ—Ç–∫—Ä—ã—Ç–æ–π TRI —Å–µ—Å—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_init –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.');
      return;
    }

    // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const { results, errors } = parseTriResults(resultsText);

    if (errors.length > 0) {
      await ctx.reply(
        `‚ùå <b>–û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:</b>\n\n${errors.join('\n')}\n\n` +
        'üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
        { parse_mode: 'HTML' }
      );
      return;
    }

    if (results.length === 0) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
      return;
    }

    await ctx.reply(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç(–æ–≤)...`);

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥
    const teamPlayerService = container.resolve(TeamPlayerService);
    const { teamAIds, teamBIds, teamCIds } = await teamPlayerService.getThreeTeamIds(gameSession.id);

    if (teamAIds.length !== 8 || teamBIds.length !== 8 || teamCIds.length !== 8) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥. –ö–∞–∂–¥–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ä–æ–≤–Ω–æ 8 –∏–≥—Ä–æ–∫–æ–≤.');
      return;
    }

    const teamIds = { A: teamAIds, B: teamBIds, C: teamCIds };

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –º–∏–Ω–∏-–º–∞—Ç—á–µ–π
    const ratingService = container.resolve(RatingService);
    let processedCount = 0;
    let ratingUpdatesCount = 0;
    let firstMatchForInflation = true;

    for (let i = 0; i < results.length; i++) {
      const result = results[i];

      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –º–∏–Ω–∏-–º–∞—Ç—á–∞
        await prisma.triMiniMatch.create({
          data: {
            sessionId: gameSession.id,
            seq: i + 1,
            t1: result.t1,
            t2: result.t2,
            s1: result.s1,
            s2: result.s2,
            winner: result.winner,
            ratingApplied: result.winner !== null
          }
        });

        processedCount++;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ç—á–µ–π (–ø–æ–±–µ–¥—ã –∏ –Ω–∏—á—å–∏)
        if (result.winner) {
          const winnerIds = teamIds[result.winner as 'A' | 'B' | 'C'];

          // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à—É—é –∫–æ–º–∞–Ω–¥—É
          const loserTeam = result.winner === result.t1 ? result.t2 : result.t1;
          const loserIds = teamIds[loserTeam as 'A' | 'B' | 'C'];

          logger.info(`TRI match: ${result.t1} ${result.s1}-${result.s2} ${result.t2}, winner: ${result.winner}, loser: ${loserTeam}`);

          await ratingService.updateTrueSkill(winnerIds, loserIds, {
            matchPlayedAt: gameSession.createdAt,
            applyIdleInflation: firstMatchForInflation, // –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ç—á–∞
            weight: CONFIG.TRI_MINI_MATCH_WEIGHT
          });

          ratingUpdatesCount++;
          firstMatchForInflation = false; // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –º–∞—Ç—á–µ–π
        } else {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∏—á—å—é —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–π—Ç–∏–Ω–≥–∞
          const team1Ids = teamIds[result.t1 as 'A' | 'B' | 'C'];
          const team2Ids = teamIds[result.t2 as 'A' | 'B' | 'C'];

          logger.info(`TRI draw: ${result.t1} ${result.s1}-${result.s2} ${result.t2}`);

          await ratingService.updateTrueSkillDraw(team1Ids, team2Ids, {
            matchPlayedAt: gameSession.createdAt,
            applyIdleInflation: firstMatchForInflation,
            weight: CONFIG.TRI_MINI_MATCH_WEIGHT
          });

          ratingUpdatesCount++;
          firstMatchForInflation = false;
        }

      } catch (error) {
        logger.error(`Error processing TRI match ${i + 1}:`, error);
      }
    }

    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å –º–∞—Ç—á–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    const statisticsService = container.resolve(StatisticsService);
    await statisticsService.saveMatchResult(gameSession.id, -1, -1); // TRI —Ñ–æ—Ä–º–∞—Ç - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await prisma.gameSession.update({
      where: { id: gameSession.id },
      data: { isClosed: true }
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    let reportMessage = `‚úÖ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n`;
    reportMessage += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
    reportMessage += `‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${processedCount}/${results.length}\n`;
    reportMessage += `‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥–∞: ${ratingUpdatesCount}\n`;
    reportMessage += `‚Ä¢ –ù–∏—á—å–∏—Ö (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º): ${results.filter(r => r.winner === null).length}\n\n`;

    if (results.length > 0) {
      reportMessage += `üéØ <b>–ü–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n`;
      results.slice(0, Math.min(5, results.length)).forEach((result, i) => {
        const scoreStr = `${result.s1}-${result.s2}`;
        const winnerStr = result.winner ? ` (–ø–æ–±–µ–¥–∞ ${result.winner})` : ' (–Ω–∏—á—å—è)';
        reportMessage += `${i + 1}. ${result.t1} ${scoreStr} ${result.t2}${winnerStr}\n`;
      });

      if (results.length > 5) {
        reportMessage += `... –∏ –µ—â—ë ${results.length - 5} –º–∞—Ç—á(–µ–π)\n`;
      }
    }

    reportMessage += `\nüí° –†–µ–π—Ç–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –≤–µ—Å–æ–º ${CONFIG.TRI_MINI_MATCH_WEIGHT}`;

    await ctx.reply(reportMessage, { parse_mode: 'HTML' });

    logger.info(`TRI results processed: ${processedCount} matches, ${ratingUpdatesCount} rating updates for session ${gameSession.id} by admin ${ctx.from?.id}`);

  } catch (error) {
    logger.error('Error in tri_results command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ TRI.');
  }
};

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö TRI —Å–µ—Å—Å–∏–π
export const triStatusCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    if (!CONFIG.TRI_MODE_ENABLED) {
      await ctx.reply('‚ùå –†–µ–∂–∏–º —Ç—Ä—ë—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
      return;
    }

    const sessions = await prisma.gameSession.findMany({
      where: { format: 'TRI' },
      orderBy: { createdAt: 'desc' },
      take: 10
    });

    if (sessions.length === 0) {
      await ctx.reply('üìã –ù–µ—Ç TRI —Å–µ—Å—Å–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ.');
      return;
    }

    let message = `üìã <b>–°—Ç–∞—Ç—É—Å TRI —Å–µ—Å—Å–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):</b>\n\n`;

    sessions.forEach((session, index) => {
      const statusIcon = session.isClosed ? 'üîí' : 'üîì';
      const confirmedIcon = session.isConfirmed ? '‚úÖ' : '‚è≥';
      const initIcon = session.isInitialized ? 'üéØ' : 'üìù';
      
      const date = session.createdAt.toLocaleDateString('ru-RU');
      const time = session.createdAt.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      
      message += `${index + 1}. ${statusIcon} –°–µ—Å—Å–∏—è #${session.id} (${date} ${time})\n`;
      message += `   ${initIcon} –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–æ–≤–∞–Ω–∞: ${session.isInitialized ? '–î–∞' : '–ù–µ—Ç'}\n`;
      message += `   ${confirmedIcon} –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: ${session.isConfirmed ? '–î–∞' : '–ù–µ—Ç'}\n`;
      message += `   ${statusIcon} –ó–∞–∫—Ä—ã—Ç–∞: ${session.isClosed ? '–î–∞' : '–ù–µ—Ç'}\n\n`;
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –æ—Ç–∫—Ä—ã—Ç—É—é —Å–µ—Å—Å–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ
    const openSession = sessions.find(s => !s.isClosed && s.isConfirmed);
    if (openSession) {
      message += `üéÆ <b>–ê–∫—Ç–∏–≤–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–µ—Å—Å–∏—è:</b> #${openSession.id}\n`;
      message += `üí° –≠—Ç–∞ —Å–µ—Å—Å–∏—è –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ /tri_results`;
    } else {
      message += `‚ú® <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–µ—Å—Å–∏–π</b>\n`;
      message += `üí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —á–µ—Ä–µ–∑ /tri_init`;
    }

    await ctx.reply(message, { parse_mode: 'HTML' });

  } catch (error) {
    logger.error('Error in tri_status command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ TRI —Å–µ—Å—Å–∏–π.');
  }
};