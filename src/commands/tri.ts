import { container } from 'tsyringe';
import { BotContext } from '../bot';
import { CONFIG, MESSAGES } from '../config';
import { TeamService } from '../services/team.service';
import { TeamPlayerService } from '../services/team-player.service';
import { RatingService } from '../services/rating.service';
import { checkAdminPrivateOnly } from '../utils/chat';
import { prisma } from '../utils/database';
import { getCurrentWeek } from '../utils/week';
import { logger } from '../utils/logger';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
interface TriMatchResult {
  t1: string;
  t2: string;
  s1: number;
  s2: number;
  winner: string | null;
}

export const triInitCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    if (!CONFIG.TRI_MODE_ENABLED) {
      await ctx.reply('‚ùå –†–µ–∂–∏–º —Ç—Ä—ë—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
      return;
    }

    const { week, year } = getCurrentWeek();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è DUO –∏–≥—Ä–∞
    const existingSession = await prisma.gameSession.findUnique({
      where: { week_year: { week, year } }
    });

    if (existingSession && existingSession.format === 'DUO' && existingSession.isConfirmed) {
      await ctx.reply('‚ùå –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –æ–±—ã—á–Ω–∞—è –∏–≥—Ä–∞ 2√ó8. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º TRI —Ä–µ–∂–∏–º–∞.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ–¥–µ–ª–∏
    const { main } = await ctx.gameService.getWeekPlayers();

    if (main.length < 24) {
      await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è TRI —Ä–µ–∂–∏–º–∞ (${main.length}/24)\n\n–î–ª—è —Ä–µ–∂–∏–º–∞ —Ç—Ä—ë—Ö –∫–æ–º–∞–Ω–¥ –Ω—É–∂–Ω–æ —Ä–æ–≤–Ω–æ 24 –∏–≥—Ä–æ–∫–∞.`);
      return;
    }

    if (main.length > 24) {
      await ctx.reply(`‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è TRI —Ä–µ–∂–∏–º–∞ (${main.length}/24)\n\n–î–ª—è —Ä–µ–∂–∏–º–∞ —Ç—Ä—ë—Ö –∫–æ–º–∞–Ω–¥ –Ω—É–∂–Ω–æ —Ä–æ–≤–Ω–æ 24 –∏–≥—Ä–æ–∫–∞.`);
      return;
    }

    await ctx.reply('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ 8 –∏–≥—Ä–æ–∫–æ–≤...');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã
    const teamService = container.resolve(TeamService);
    const balance = await teamService.generateThreeTeams(main);

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    const gameSession = await prisma.gameSession.upsert({
      where: { week_year: { week, year } },
      update: {
        format: 'TRI',
        teamA: 'üî¥ –ö—Ä–∞—Å–Ω–∞—è',
        teamB: 'üîµ –°–∏–Ω—è—è', 
        teamC: 'üü¢ –ó–µ–ª—ë–Ω–∞—è',
        isInitialized: true,
        isConfirmed: false
      },
      create: {
        week,
        year,
        format: 'TRI',
        teamA: 'üî¥ –ö—Ä–∞—Å–Ω–∞—è',
        teamB: 'üîµ –°–∏–Ω—è—è',
        teamC: 'üü¢ –ó–µ–ª—ë–Ω–∞—è',
        isInitialized: true,
        isConfirmed: false
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥
    const teamPlayerService = container.resolve(TeamPlayerService);
    await teamPlayerService.saveThreeTeamComposition(
      gameSession.id,
      balance.teamA.players,
      balance.teamB.players,
      balance.teamC.players
    );

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = teamService.formatThreeTeamsMessage(balance, {
      teamA: 'üî¥ –ö—Ä–∞—Å–Ω–∞—è',
      teamB: 'üîµ –°–∏–Ω—è—è', 
      teamC: 'üü¢ –ó–µ–ª—ë–Ω–∞—è'
    });

    await ctx.reply(
      `‚öΩ <b>–ö–æ–º–∞–Ω–¥—ã TRI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n${message}\n\n` +
      `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_confirm –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–æ–≤`,
      { parse_mode: 'HTML' }
    );

    logger.info(`TRI teams generated for week ${year}-${week} by admin ${ctx.from?.id}`);

  } catch (error) {
    logger.error('Error in tri_init command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TRI –∫–æ–º–∞–Ω–¥.');
  }
};

export const triConfirmCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    if (!CONFIG.TRI_MODE_ENABLED) {
      await ctx.reply('‚ùå –†–µ–∂–∏–º —Ç—Ä—ë—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
      return;
    }

    const { week, year } = getCurrentWeek();

    const gameSession = await prisma.gameSession.findUnique({
      where: { week_year: { week, year } }
    });

    if (!gameSession) {
      await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π TRI —Å–µ—Å—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_init –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.');
      return;
    }

    if (gameSession.format !== 'TRI') {
      await ctx.reply('‚ùå –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è TRI —Ñ–æ—Ä–º–∞—Ç–æ–º.');
      return;
    }

    if (!gameSession.isInitialized) {
      await ctx.reply('‚ùå TRI —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_init.');
      return;
    }

    if (gameSession.isConfirmed) {
      await ctx.reply('‚úÖ TRI –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã.');
      return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ—Å—Ç–∞–≤—ã
    await prisma.gameSession.update({
      where: { id: gameSession.id },
      data: { isConfirmed: true }
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤—ã –¥–ª—è –ø–æ–∫–∞–∑–∞
    const teamPlayerService = container.resolve(TeamPlayerService);
    const composition = await teamPlayerService.getThreeTeamComposition(gameSession.id);

    if (!composition) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥.');
      return;
    }

    const teamService = container.resolve(TeamService);
    const teamBalance = {
      teamA: { players: composition.teamA, totalRating: 0, averageRating: 0 },
      teamB: { players: composition.teamB, totalRating: 0, averageRating: 0 },
      teamC: { players: composition.teamC, totalRating: 0, averageRating: 0 },
      maxDifference: 0,
      avgDifference: 0
    };

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
    teamBalance.teamA.totalRating = composition.teamA.reduce((sum, p) => sum + teamService.getPlayerWeight(p), 0);
    teamBalance.teamB.totalRating = composition.teamB.reduce((sum, p) => sum + teamService.getPlayerWeight(p), 0);
    teamBalance.teamC.totalRating = composition.teamC.reduce((sum, p) => sum + teamService.getPlayerWeight(p), 0);

    const message = teamService.formatThreeTeamsMessage(teamBalance, {
      teamA: 'üî¥ –ö—Ä–∞—Å–Ω–∞—è',
      teamB: 'üîµ –°–∏–Ω—è—è',
      teamC: 'üü¢ –ó–µ–ª—ë–Ω–∞—è'
    });

    await ctx.reply(
      `‚úÖ <b>TRI –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!</b>\n\n${message}\n\n` +
      `üéÆ –ö–æ–º–∞–Ω–¥—ã –≥–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "winner stays"\n` +
      `üìù –ü–æ—Å–ª–µ –º–∞—Ç—á–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_results –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`,
      { parse_mode: 'HTML' }
    );

    logger.info(`TRI teams confirmed for week ${year}-${week} by admin ${ctx.from?.id}`);

  } catch (error) {
    logger.error('Error in tri_confirm command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ TRI –∫–æ–º–∞–Ω–¥.');
  }
};

export const triCancelCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    const { week, year } = getCurrentWeek();

    const gameSession = await prisma.gameSession.findUnique({
      where: { week_year: { week, year } }
    });

    if (!gameSession || gameSession.format !== 'TRI') {
      await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π TRI —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
      return;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ —á–µ—Ä–Ω–æ–≤–∏–∫
    await prisma.gameSession.update({
      where: { id: gameSession.id },
      data: { 
        isConfirmed: false,
        isInitialized: false
      }
    });

    await ctx.reply(
      'üîÑ TRI —Å–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫.\n\n' +
      'üí° –°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_init –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ /tri_confirm –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Å–æ—Å—Ç–∞–≤–æ–≤.'
    );

    logger.info(`TRI session cancelled for week ${year}-${week} by admin ${ctx.from?.id}`);

  } catch (error) {
    logger.error('Error in tri_cancel command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ TRI —Å–µ—Å—Å–∏–∏.');
  }
};

// –ü–∞—Ä—Å–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
function parseTriResults(text: string): { results: TriMatchResult[]; errors: string[] } {
  const lines = text.trim().split('\n');
  const results: TriMatchResult[] = [];
  const errors: string[] = [];

  if (lines.length > CONFIG.TRI_BULK_PARSE_MAX_LINES) {
    errors.push(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å—Ç—Ä–æ–∫: ${lines.length}/${CONFIG.TRI_BULK_PARSE_MAX_LINES}`);
    return { results: [], errors };
  }

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    if (!line) continue;

    const lineNum = i + 1;

    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    let match = line.match(/^([ABC])\s+(\d+)-(\d+)\s+([ABC])$/); // A 5-3 B
    if (!match) {
      match = line.match(/^([ABC])-([ABC])\s+(\d+):(\d+)$/); // A-B 5:3
      if (match) {
        match = [match[0], match[1], match[3], match[4], match[2]]; // –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
      }
    }
    if (!match) {
      match = line.match(/^([ABC])([ABC])\s+(\d+)\s+(\d+)$/); // AB 5 3
      if (match) {
        match = [match[0], match[1], match[3], match[4], match[2]]; // –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º
      }
    }

    if (!match) {
      errors.push(`–°—Ç—Ä–æ–∫–∞ ${lineNum}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å "${line}"`);
      continue;
    }

    const t1 = match[1];
    const s1 = parseInt(match[2]);
    const s2 = parseInt(match[3]);
    const t2 = match[4];

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!['A', 'B', 'C'].includes(t1) || !['A', 'B', 'C'].includes(t2)) {
      errors.push(`–°—Ç—Ä–æ–∫–∞ ${lineNum}: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã "${t1}" –∏ "${t2}"`);
      continue;
    }

    if (t1 === t2) {
      errors.push(`–°—Ç—Ä–æ–∫–∞ ${lineNum}: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å —Å–∞–º–∞ —Å —Å–æ–±–æ–π`);
      continue;
    }

    if (s1 < 0 || s2 < 0) {
      errors.push(`–°—Ç—Ä–æ–∫–∞ ${lineNum}: —Å—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º`);
      continue;
    }

    const winner = s1 > s2 ? t1 : s2 > s1 ? t2 : null;

    results.push({ t1, t2, s1, s2, winner });
  }

  return { results, errors };
}

export const triResultsCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    if (!CONFIG.TRI_MODE_ENABLED) {
      await ctx.reply('‚ùå –†–µ–∂–∏–º —Ç—Ä—ë—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    let resultsText = '';
    if (ctx.message && 'text' in ctx.message) {
      resultsText = ctx.message.text?.replace('/tri_results', '').trim() || '';
    }

    if (!resultsText) {
      await ctx.reply(
        '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π.\n\n' +
        'üìù <b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:</b>\n' +
        '<code>/tri_results\n' +
        'A 5-3 B\n' +
        'A 2-4 C\n' +
        'C 1-0 B</code>\n\n' +
        'üéØ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Ç—Ä–æ–∫:</b>\n' +
        '‚Ä¢ <code>A 5-3 B</code>\n' +
        '‚Ä¢ <code>A-B 5:3</code>\n' +
        '‚Ä¢ <code>AB 5 3</code>',
        { parse_mode: 'HTML' }
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º TRI —Å–µ—Å—Å–∏—é
    const { week, year } = getCurrentWeek();
    const gameSession = await prisma.gameSession.findUnique({
      where: { week_year: { week, year } }
    });

    if (!gameSession || gameSession.format !== 'TRI') {
      await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π TRI —Å–µ—Å—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_init –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.');
      return;
    }

    if (!gameSession.isConfirmed) {
      await ctx.reply('‚ùå TRI –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tri_confirm.');
      return;
    }

    // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const { results, errors } = parseTriResults(resultsText);

    if (errors.length > 0) {
      await ctx.reply(
        `‚ùå <b>–û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:</b>\n\n${errors.join('\n')}\n\n` +
        'üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
        { parse_mode: 'HTML' }
      );
      return;
    }

    if (results.length === 0) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
      return;
    }

    await ctx.reply(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç(–æ–≤)...`);

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥
    const teamPlayerService = container.resolve(TeamPlayerService);
    const { teamAIds, teamBIds, teamCIds } = await teamPlayerService.getThreeTeamIds(gameSession.id);

    if (teamAIds.length !== 8 || teamBIds.length !== 8 || teamCIds.length !== 8) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥. –ö–∞–∂–¥–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ä–æ–≤–Ω–æ 8 –∏–≥—Ä–æ–∫–æ–≤.');
      return;
    }

    const teamIds = { A: teamAIds, B: teamBIds, C: teamCIds };

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –º–∏–Ω–∏-–º–∞—Ç—á–µ–π
    const ratingService = container.resolve(RatingService);
    let processedCount = 0;
    let ratingUpdatesCount = 0;
    let firstMatchForInflation = true;

    for (let i = 0; i < results.length; i++) {
      const result = results[i];
      
      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –º–∏–Ω–∏-–º–∞—Ç—á–∞
        await prisma.triMiniMatch.create({
          data: {
            sessionId: gameSession.id,
            seq: i + 1,
            t1: result.t1,
            t2: result.t2,
            s1: result.s1,
            s2: result.s2,
            winner: result.winner,
            ratingApplied: result.winner !== null
          }
        });

        processedCount++;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
        if (result.winner) {
          const winnerIds = teamIds[result.winner as 'A' | 'B' | 'C'];
          const loserIds = teamIds[(result.winner === result.t1 ? result.t2 : result.t1) as 'A' | 'B' | 'C'];

          await ratingService.updateTrueSkill(winnerIds, loserIds, {
            matchPlayedAt: gameSession.createdAt,
            applyIdleInflation: firstMatchForInflation, // –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ç—á–∞
            weight: CONFIG.TRI_MINI_MATCH_WEIGHT
          });

          ratingUpdatesCount++;
          firstMatchForInflation = false; // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –º–∞—Ç—á–µ–π
        }

      } catch (error) {
        logger.error(`Error processing TRI match ${i + 1}:`, error);
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    let reportMessage = `‚úÖ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n`;
    reportMessage += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
    reportMessage += `‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${processedCount}/${results.length}\n`;
    reportMessage += `‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥–∞: ${ratingUpdatesCount}\n`;
    reportMessage += `‚Ä¢ –ù–∏—á—å–∏—Ö (–±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è): ${processedCount - ratingUpdatesCount}\n\n`;

    if (results.length > 0) {
      reportMessage += `üéØ <b>–ü–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n`;
      results.slice(0, Math.min(5, results.length)).forEach((result, i) => {
        const scoreStr = `${result.s1}-${result.s2}`;
        const winnerStr = result.winner ? ` (–ø–æ–±–µ–¥–∞ ${result.winner})` : ' (–Ω–∏—á—å—è)';
        reportMessage += `${i + 1}. ${result.t1} ${scoreStr} ${result.t2}${winnerStr}\n`;
      });

      if (results.length > 5) {
        reportMessage += `... –∏ –µ—â—ë ${results.length - 5} –º–∞—Ç—á(–µ–π)\n`;
      }
    }

    reportMessage += `\nüí° –†–µ–π—Ç–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –≤–µ—Å–æ–º ${CONFIG.TRI_MINI_MATCH_WEIGHT}`;

    await ctx.reply(reportMessage, { parse_mode: 'HTML' });

    logger.info(`TRI results processed: ${processedCount} matches, ${ratingUpdatesCount} rating updates for week ${year}-${week} by admin ${ctx.from?.id}`);

  } catch (error) {
    logger.error('Error in tri_results command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ TRI.');
  }
};