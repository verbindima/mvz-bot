import { BotContext } from '../bot';
import { CONFIG } from '../config';
import { prisma } from '../utils/database';
import { getCurrentWeek } from '../utils/week';

export const initWeekCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      return;
    }

    const text = ('text' in ctx.message! && ctx.message.text) ? ctx.message.text : '';
    const args = text.split('\n');
    
    if (args.length < 2) {
      await ctx.reply(
        `üèÅ <b>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n\n` +
        `<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n` +
        `/init_week\n` +
        `—Ç–µ–ª–µ—Ñ–æ–Ω –±–∞–Ω–∫ —Å—É–º–º–∞\n` +
        `–¥–∞—Ç–∞ –≤—Ä–µ–º—è\n` +
        `–∞–¥—Ä–µ—Å\n\n` +
        `<b>–ü—Ä–∏–º–µ—Ä:</b>\n` +
        `/init_week\n` +
        `+7900123456 –°–±–µ—Ä 1500\n` +
        `10.08.2025 10:00\n` +
        `—É–ª. –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è, 10, –°–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å "–ê—Ä–µ–Ω–∞"`
      , { parse_mode: 'HTML' });
      return;
    }

    // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    const paymentLine = args[1]?.trim();
    const dateLine = args[2]?.trim();
    const locationLine = args[3]?.trim();
    
    if (!paymentLine || !dateLine || !locationLine) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏.');
      return;
    }

    // –ü–∞—Ä—Å–∏–º –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const paymentParts = paymentLine.split(' ');
    if (paymentParts.length < 3) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ù—É–∂–Ω–æ: —Ç–µ–ª–µ—Ñ–æ–Ω –±–∞–Ω–∫ —Å—É–º–º–∞');
      return;
    }

    const paymentPhone = paymentParts[0];
    const paymentBank = paymentParts[1];
    const paymentAmount = parseFloat(paymentParts[2]);

    if (isNaN(paymentAmount)) {
      await ctx.reply('‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º');
      return;
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú
    const dateTimeRegex = /^(\d{2})\.(\d{2})\.(\d{4})\s+(\d{1,2}):(\d{2})$/;
    const dateMatch = dateLine.match(dateTimeRegex);
    
    if (!dateMatch) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú');
      return;
    }
    
    const [, day, month, yearStr, hour, minute] = dateMatch;
    const gameDate = new Date(
      parseInt(yearStr),
      parseInt(month) - 1, // –º–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
      parseInt(day),
      parseInt(hour),
      parseInt(minute)
    );
    
    if (isNaN(gameDate.getTime())) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.');
      return;
    }

    const { week, year } = getCurrentWeek();

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const gameSession = await prisma.gameSession.upsert({
      where: {
        week_year: { week, year },
      },
      update: {
        isInitialized: true,
        paymentPhone,
        paymentBank,
        paymentAmount,
        gameDate,
        gameLocation: locationLine,
      },
      create: {
        week,
        year,
        teamA: '',
        teamB: '',
        isConfirmed: false,
        isInitialized: true,
        paymentPhone,
        paymentBank,
        paymentAmount,
        gameDate,
        gameLocation: locationLine,
      },
    });

    // –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    await prisma.weekEntry.deleteMany({
      where: { 
        week, 
        year,
      },
    });

    const formatDate = (date: Date): string => {
      return date.toLocaleString('ru-RU', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    };

    let message = `üèÅ <b>–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n`;
    message += `üìÖ <b>–ö–æ–≥–¥–∞:</b> ${formatDate(gameDate)}\n`;
    message += `üìç <b>–ì–¥–µ:</b> ${locationLine}\n\n`;
    message += `üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>\n`;
    message += `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <code>${paymentPhone}</code>\n`;
    message += `‚Ä¢ –ë–∞–Ω–∫: ${paymentBank}\n`;
    message += `‚Ä¢ –°—É–º–º–∞: ${paymentAmount} ‚ÇΩ\n\n`;
    message += `üéØ <b>–°–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –æ—Ç–∫—Ä—ã—Ç!</b>\n`;
    message += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /info –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É.`;

    await ctx.reply(message, { 
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üì¢ –û–±—ä—è–≤–∏—Ç—å –≤—Å–µ–º', callback_data: 'announce_game' }],
          [{ text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–∞–≤', callback_data: 'refresh_info' }],
        ],
      },
    });

  } catch (error) {
    console.error('Error in init week command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª–∏.');
  }
};