import { BotContext } from '../bot';
import { CONFIG } from '../config';
import { prisma } from '../utils/database';
import { getCurrentWeek } from '../utils/week';

export const removeFromGameCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      return;
    }

    const text = ('text' in ctx.message! && ctx.message.text) ? ctx.message.text : '';
    const args = text.split(' ').slice(1);
    
    if (args.length !== 1) {
      await ctx.reply(
        `üìã <b>–£–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã:</b>\n\n` +
        `/remove_from_game username\n\n` +
        `<b>–ü—Ä–∏–º–µ—Ä:</b>\n` +
        `/remove_from_game john_doe`
      , { parse_mode: 'HTML' });
      return;
    }

    const username = args[0].replace('@', '');
    
    // –ò—â–µ–º –∏–≥—Ä–æ–∫–∞
    const player = await prisma.player.findFirst({
      where: { username }
    });
    
    if (!player) {
      await ctx.reply(`‚ùå –ò–≥—Ä–æ–∫ @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    const { week, year } = getCurrentWeek();
    
    // –ò—â–µ–º –∑–∞–ø–∏—Å—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    const entry = await prisma.weekEntry.findFirst({
      where: {
        week,
        year,
        playerId: player.id,
      },
    });
    
    if (!entry) {
      await ctx.reply(`‚ùå –ò–≥—Ä–æ–∫ @${username} –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É`);
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∏–≥—Ä—ã
    await prisma.weekEntry.delete({
      where: { id: entry.id },
    });
    
    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –±—ã–ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ—Å—Ç–∞–≤–µ, –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    if (entry.state === 'MAIN') {
      const firstWaitingEntry = await prisma.weekEntry.findFirst({
        where: {
          week,
          year,
          state: 'WAIT',
        },
        orderBy: { createdAt: 'asc' },
      });

      if (firstWaitingEntry) {
        await prisma.weekEntry.update({
          where: { id: firstWaitingEntry.id },
          data: { state: 'MAIN' },
        });
        
        const promotedPlayer = await prisma.player.findUnique({
          where: { id: firstWaitingEntry.playerId }
        });
        
        await ctx.reply(
          `‚úÖ <b>–ò–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –∏–≥—Ä—ã:</b> @${username}\n\n` +
          `üìà <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è:</b> @${promotedPlayer?.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}`
        , { parse_mode: 'HTML' });
      } else {
        await ctx.reply(`‚úÖ <b>–ò–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –∏–≥—Ä—ã:</b> @${username}`, { parse_mode: 'HTML' });
      }
    } else {
      await ctx.reply(`‚úÖ <b>–ò–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è:</b> @${username}`, { parse_mode: 'HTML' });
    }
    
  } catch (error) {
    console.error('Error in remove from game command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ –∏–∑ –∏–≥—Ä—ã.');
  }
};