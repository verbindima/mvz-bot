import { BotContext } from '@/bot';
import { CONFIG } from '@/config';
import { prisma } from '@/utils/database';
import { getCurrentWeek } from '@/utils/week';

export const confirmPlayerPaymentCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      return;
    }

    const text = ('text' in ctx.message! && ctx.message.text) ? ctx.message.text : '';
    const args = text.split(' ').slice(1);
    
    if (args.length !== 1) {
      await ctx.reply(
        `üí≥ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∏–≥—Ä–æ–∫–∞</b>\n\n` +
        `<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n` +
        `/confirm_player_payment @username\n\n` +
        `<b>–ü—Ä–∏–º–µ—Ä:</b>\n` +
        `/confirm_player_payment @john_doe`
      , { parse_mode: 'HTML' });
      return;
    }

    const username = args[0].replace('@', '');
    
    // –ò—â–µ–º –∏–≥—Ä–æ–∫–∞
    const player = await prisma.player.findFirst({
      where: { username }
    });
    
    if (!player) {
      await ctx.reply(`‚ùå –ò–≥—Ä–æ–∫ @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    const { week, year } = getCurrentWeek();

    // –ò—â–µ–º –∑–∞–ø–∏—Å—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    const weekEntry = await prisma.weekEntry.findFirst({
      where: {
        week,
        year,
        playerId: player.id,
      },
    });
    
    if (!weekEntry) {
      await ctx.reply(`‚ùå –ò–≥—Ä–æ–∫ @${username} –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É`);
      return;
    }

    if (weekEntry.isPaid) {
      await ctx.reply(`‚úÖ –û–ø–ª–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞ @${username} —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞`);
      return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
    await prisma.weekEntry.update({
      where: { id: weekEntry.id },
      data: { isPaid: true },
    });

    await ctx.reply(
      `‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n` +
      `üë§ –ò–≥—Ä–æ–∫: ${player.firstName} (@${username})\n` +
      `üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞`
    , { parse_mode: 'HTML' });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –æ–± –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
    try {
      await ctx.telegram.sendMessage(
        Number(player.telegramId),
        `‚úÖ <b>–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n` +
        `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞.\n` +
        `–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.`,
        { parse_mode: 'HTML' }
      );
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–≥—Ä–æ–∫—É
    }

  } catch (error) {
    console.error('Error in confirm player payment command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.');
  }
};

export const paymentStatusCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      return;
    }

    const { week, year } = getCurrentWeek();

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø–ª–∞—Ç–µ
    const weekEntries = await prisma.weekEntry.findMany({
      where: { week, year },
      include: { player: true },
      orderBy: [
        { state: 'asc' }, // MAIN –ø–µ—Ä–≤—ã–µ, –ø–æ—Ç–æ–º WAIT
        { createdAt: 'asc' } // –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏
      ],
    });

    if (weekEntries.length === 0) {
      await ctx.reply('üìã –ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω');
      return;
    }

    const mainPlayers = weekEntries.filter(entry => entry.state === 'MAIN');
    const waitingPlayers = weekEntries.filter(entry => entry.state === 'WAIT');

    let message = `üí≥ <b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é</b>\n\n`;
    
    message += `üë• <b>–û—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤ (${mainPlayers.length}/16):</b>\n`;
    
    if (mainPlayers.length > 0) {
      mainPlayers.forEach((entry, i) => {
        const paymentIcon = entry.isPaid ? '‚úÖ' : (entry.paymentTime ? '‚è≥' : '‚ùå');
        message += `${i + 1}. ${paymentIcon} ${entry.player.firstName}`;
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º @username —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª
        if (entry.player.username && !entry.isPaid) {
          message += ` (@${entry.player.username})`;
        }
        if (entry.paymentTime && !entry.isPaid) {
          message += ` - –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`;
        }
        message += `\n`;
      });
    } else {
      message += `<i>–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç</i>\n`;
    }
    
    if (waitingPlayers.length > 0) {
      message += `\n‚è≥ <b>–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è (${waitingPlayers.length}):</b>\n`;
      waitingPlayers.forEach((entry, i) => {
        const paymentIcon = entry.isPaid ? '‚úÖ' : (entry.paymentTime ? '‚è≥' : '‚ùå');
        message += `${i + 1}. ${paymentIcon} ${entry.player.firstName}`;
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º @username —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª
        if (entry.player.username && !entry.isPaid) {
          message += ` (@${entry.player.username})`;
        }
        if (entry.paymentTime && !entry.isPaid) {
          message += ` - –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`;
        }
        message += `\n`;
      });
    }

    const paidCount = weekEntries.filter(e => e.isPaid).length;
    const pendingCount = weekEntries.filter(e => e.paymentTime && !e.isPaid).length;
    
    message += `\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
    message += `‚úÖ –û–ø–ª–∞—á–µ–Ω–æ: ${paidCount}\n`;
    message += `‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${pendingCount}\n`;
    message += `‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ: ${weekEntries.length - paidCount - pendingCount}\n\n`;
    
    message += `<b>–õ–µ–≥–µ–Ω–¥–∞:</b>\n`;
    message += `‚úÖ - –æ–ø–ª–∞—á–µ–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\n`;
    message += `‚è≥ - –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º\n`;
    message += `‚ùå - –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ`;

    await ctx.reply(message, { parse_mode: 'HTML' });

  } catch (error) {
    console.error('Error in payment status command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç.');
  }
};