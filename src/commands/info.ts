import { BotContext } from '../bot';
import { escapeHtml } from '../utils/html';
import { prisma } from '../utils/database';
import { getCurrentWeek } from '../utils/week';
import { safeEditOrReply } from '../utils/safe-edit';
import { TeamService } from '../services/team.service';
import { TeamPlayerService } from '../services/team-player.service';
import { container } from 'tsyringe';

const generateInfoMessage = async (ctx: BotContext, playerId: number) => {
  const { main, waiting } = await ctx.gameService.getWeekPlayers();

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ
  const { week, year } = getCurrentWeek();
  const gameSession = await prisma.gameSession.findUnique({
    where: {
      week_year: { week, year },
    },
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –ª–∏ –∫–æ–º–∞–Ω–¥—ã
  const teamsConfirmed = gameSession?.isConfirmed || false;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
  let playerStatus = '‚ùå –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∏–≥—Ä—É';
  let playerPosition = '';

  const teamAName = escapeHtml(gameSession?.teamA || 'üî¥');
  const teamBName = escapeHtml(gameSession?.teamB || 'üîµ');

  const playerInMain = main.find(p => p.id === playerId);
  const playerInWaiting = waiting.find(p => p.id === playerId);

  if (playerInMain) {
    if (teamsConfirmed && gameSession) {
      // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã —É—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤ –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–µ –∏–≥—Ä–æ–∫
      const teamPlayerService = container.resolve(TeamPlayerService);
      const playerTeamResult = await teamPlayerService.getPlayerTeam(gameSession.id, playerId);

      if (playerTeamResult === 'A') {
        playerStatus = `üèÖ –í—ã –≤ –∫–æ–º–∞–Ω–¥–µ ${teamAName}`;
      } else if (playerTeamResult === 'B') {
        playerStatus = `üèÖ –í—ã –≤ –∫–æ–º–∞–Ω–¥–µ ${teamBName}`;
      } else {
        playerStatus = '‚úÖ –í—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ—Å—Ç–∞–≤–µ';
      }
    } else {
      const position = main.findIndex(p => p.id === playerId) + 1;
      playerStatus = '‚úÖ –í—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ—Å—Ç–∞–≤–µ';
      playerPosition = ` (–ø–æ–∑–∏—Ü–∏—è ${position})`;
    }
  } else if (playerInWaiting) {
    const position = waiting.findIndex(p => p.id === playerId) + 1;
    playerStatus = '‚è≥ –í—ã –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è';
    playerPosition = ` (–ø–æ–∑–∏—Ü–∏—è ${position})`;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
  let mainPlayersText = '';

  if (teamsConfirmed && gameSession) {
    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã —É—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥
    const teamPlayerService = container.resolve(TeamPlayerService);
    const teamComposition = await teamPlayerService.getTeamComposition(gameSession.id);

    if (!teamComposition) {
      mainPlayersText = '<i>–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</i>';
    } else {
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å—è—Ö –∏–≥—Ä–æ–∫–æ–≤
      const teamAPlayersWithEntries = await prisma.player.findMany({
        where: { id: { in: teamComposition.teamA.map(p => p.id) } },
        include: {
          weekEntries: {
            where: { week, year },
            take: 1
          }
        }
      });

      const teamBPlayersWithEntries = await prisma.player.findMany({
        where: { id: { in: teamComposition.teamB.map(p => p.id) } },
        include: {
          weekEntries: {
            where: { week, year },
            take: 1
          }
        }
      });

      // –ü–æ–ª—É—á–∞–µ–º TeamService –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
      const teamService = container.resolve(TeamService);

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É A
      const teamAStr = teamAPlayersWithEntries.map((p, i) => {
        const escapedName = escapeHtml(p.firstName);
        const paymentIcon = p.weekEntries[0]?.isPaid ? ' ‚úÖ' : '';
        const rating = teamService.getPlayerWeight(p).toFixed(1);
        return `${i + 1}. ${escapedName} ‚Äî ${rating}${paymentIcon}`;
      }).join('\n');

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É B
      const teamBStr = teamBPlayersWithEntries.map((p, i) => {
        const escapedName = escapeHtml(p.firstName);
        const paymentIcon = p.weekEntries[0]?.isPaid ? ' ‚úÖ' : '';
        const rating = teamService.getPlayerWeight(p).toFixed(1);
        return `${i + 1}. ${escapedName} ‚Äî ${rating}${paymentIcon}`;
      }).join('\n');

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥
      const teamAWeight = teamComposition.teamA.reduce((sum, p) => sum + teamService.getPlayerWeight(p), 0);
      const teamBWeight = teamComposition.teamB.reduce((sum, p) => sum + teamService.getPlayerWeight(p), 0);
      const difference = Math.abs(teamAWeight - teamBWeight);
      const winProbability = teamService.calculateWinProbability(teamAWeight, teamBWeight);

      mainPlayersText =
        `<b>${teamAName}</b> (${teamAWeight.toFixed(1)}):\n${teamAStr}\n\n` +
        `<b>${teamBName}</b> (${teamBWeight.toFixed(1)}):\n${teamBStr}\n\n` +
        `üìä –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å–∏–ª–µ: ${difference.toFixed(2)} Œº | üéØ –®–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É ${teamAName}: ${winProbability.toFixed(1)}% vs ${teamBName}: ${(100 - winProbability).toFixed(1)}%`;
    }
  } else {
    // –û–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã
    if (main.length > 0) {
      mainPlayersText = main
        .slice(0, 16)
        .map((p, i) => {
          const escapedName = escapeHtml(p.firstName);
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –æ–ø–ª–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          const paymentIcon = p.weekEntry?.isPaid ? ' ‚úÖ' : '';
          return `${i + 1}. ${escapedName}${paymentIcon}`;
        })
        .join('\n');
    } else {
      mainPlayersText = '<i>–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç</i>';
    }
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  let message = `‚öΩ <b>–ò–≥—Ä–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ</b>\n\n`;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–µ –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
  if (gameSession?.isInitialized && gameSession.gameDate) {
    const formatDate = (date: Date): string => {
      return date.toLocaleString('ru-RU', {
        weekday: 'long',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    };

    message += `üìÖ <b>–î–∞—Ç–∞:</b> ${formatDate(gameSession.gameDate)}\n`;
    if (gameSession.gameLocation) {
      message += `üìç <b>–ú–µ—Å—Ç–æ:</b> ${gameSession.gameLocation}\n`;
    }
    message += `\n`;
  }

  if (teamsConfirmed && gameSession) {
    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã —É—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
    message += `üèÜ <b>–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n`;
    message += `${mainPlayersText}\n\n`;

    if (waiting.length > 0) {
      message += `‚è≥ <b>–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è:</b> ${waiting.length} —á–µ–ª.\n\n`;
    }

    message += `üìä <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b>\n`;
    message += `${playerStatus}${playerPosition}\n\n`;

    message += `‚úÖ <b>–ö–æ–º–∞–Ω–¥—ã –≥–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ!</b>`;
  } else {
    // –û–±—ã—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
    message += `üë• <b>–û—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤ (${main.length}/16):</b>\n`;
    message += `${mainPlayersText}\n\n`;

    if (waiting.length > 0) {
      message += `‚è≥ <b>–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è:</b> ${waiting.length} —á–µ–ª.\n\n`;
    }

    message += `üìä <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b>\n`;
    message += `${playerStatus}${playerPosition}\n\n`;

    if (main.length < 16) {
      const needed = 16 - main.length;
      message += `üéØ <b>–ù—É–∂–Ω–æ –µ—â–µ:</b> ${needed} –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞`;
    } else {
      message += `üî• <b>–û—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤ –ø–æ–ª–Ω—ã–π!</b> –ú–æ–∂–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã`;
    }
  }

  // –í—ã–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞
  let keyboard;
  if (playerInMain || playerInWaiting) {
    keyboard = [
      [{ text: '‚ùå –ü–µ—Ä–µ–¥—É–º–∞–ª', callback_data: 'leave' }],
      [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }, { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_info' }],
      [{ text: 'üí≥ –û–ø–ª–∞—Ç–∞', callback_data: 'payment_info' }, { text: '‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥', callback_data: 'rating_info' }],
      [{ text: '‚ùé –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_menu' }],
    ];
  } else {
    keyboard = [
      [{ text: '‚öΩ –Ø –∏–≥—Ä–∞—é', callback_data: 'join' }],
      [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }, { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_info' }],
      [{ text: 'üí≥ –û–ø–ª–∞—Ç–∞', callback_data: 'payment_info' }, { text: '‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥', callback_data: 'rating_info' }],
      [{ text: '‚ùé –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_menu' }],
    ];
  }

  return { message, keyboard };
};

export const infoCommand = async (ctx: BotContext): Promise<void> => {
  try {
    const player = await ctx.playerService.getPlayer(ctx.from!.id);

    if (!player) {
      const method = ctx.callbackQuery ? 'editMessageText' : 'reply';
      const options: any = {
        reply_markup: {
          inline_keyboard: [[{ text: 'üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data: 'start_registration' }]],
        },
      };

      if (ctx.callbackQuery) {
        options.parse_mode = 'HTML';
      }

      await ctx[method](
        '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
        options
      );
      return;
    }

    const { message, keyboard } = await generateInfoMessage(ctx, player.id);

    await safeEditOrReply(ctx, message, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: keyboard,
      },
    });

  } catch (error) {
    console.error('Error in info command:', error);
    await ctx.reply(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ.\n\n' +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
    );
  }
};