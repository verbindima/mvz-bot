import { BotContext } from '@/bot';
import { CONFIG } from '@/config';
import { getCurrentWeek } from '@/utils/week';
import { prisma } from '@/utils/database';

export const add16Command = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      return;
    }

    const text = ('text' in ctx.message! && ctx.message.text) ? ctx.message.text : '';
    const args = text.split(' ').slice(1); // —É–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É /add16

    if (args.length === 0) {
      await ctx.reply(
        `üìã <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n` +
        `/add16 username1 username2 username3 ...\n\n` +
        `<b>–ü—Ä–∏–º–µ—Ä:</b>\n` +
        `/add16 john_doe mary_smith alex_jones mike_wilson`
      , { parse_mode: 'HTML' });
      return;
    }

    if (args.length > 16) {
      await ctx.reply(`‚ùå –ú–∞–∫—Å–∏–º—É–º 16 –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ —Ä–∞–∑. –£–∫–∞–∑–∞–Ω–æ: ${args.length}`);
      return;
    }

    const { week, year } = getCurrentWeek();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
    const existingEntries = await prisma.weekEntry.findMany({
      where: { week, year },
      include: { player: true }
    });

    if (existingEntries.length > 0) {
      await ctx.reply(`‚ö†Ô∏è –ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ ${existingEntries.length} –∏–≥—Ä–æ–∫–æ–≤. –û—á–∏—Å—Ç–∏—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ? /clear_and_add16 ${args.join(' ')}`);
      return;
    }

    // –ò—â–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ username (—É–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å)
    const usernames = args.map(arg => arg.replace('@', ''));
    const players = await prisma.player.findMany({
      where: {
        username: {
          in: usernames
        }
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω—ã –ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏
    const foundUsernames = players.map(p => p.username).filter(u => u);
    const notFound = usernames.filter(username => !foundUsernames.includes(username));

    if (notFound.length > 0) {
      await ctx.reply(`‚ùå –ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${notFound.map(u => '@' + u).join(', ')}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å username –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–≥—Ä–æ–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const alreadyAdded = existingEntries.filter(entry =>
      players.some(p => p.id === entry.playerId)
    );

    if (alreadyAdded.length > 0) {
      const duplicates = alreadyAdded.map(entry => '@' + entry.player.username).join(', ');
      await ctx.reply(`‚ö†Ô∏è –°–ª–µ–¥—É—é—â–∏–µ –∏–≥—Ä–æ–∫–∏ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã: ${duplicates}`);
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤
    const entries = players.map(player => ({
      week,
      year,
      playerId: player.id,
      state: 'MAIN'
    }));

    await prisma.weekEntry.createMany({
      data: entries
    });

    let message = `‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ ${players.length} –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤:</b>\n\n`;
    players.forEach((player, index) => {
      message += `${index + 1}. ${player.firstName}${player.username ? ` @${player.username}` : ''} (${player.skillSelf})\n`;
    });

    const currentTotal = existingEntries.length + players.length;
    message += `\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–æ: ${currentTotal}/16`;

    await ctx.reply(message, { parse_mode: 'HTML' });

  } catch (error) {
    console.error('Error in add16 command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤.');
  }
};

export const clearAndAdd16Command = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      return;
    }

    const { week, year } = getCurrentWeek();

    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    const deleted = await prisma.weekEntry.deleteMany({
      where: { week, year }
    });

    await ctx.reply(`üóëÔ∏è –û—á–∏—â–µ–Ω–∞ –Ω–µ–¥–µ–ª—è ${week}/${year}. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${deleted.count}\n\n–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è—é –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤...`);

    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
    const text = ('text' in ctx.message! && ctx.message.text) ? ctx.message.text : '';
    const args = text.split(' ').slice(1); // —É–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É /clear_and_add16

    if (args.length === 0) {
      await ctx.reply(
        `üìã <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n` +
        `/clear_and_add16 username1 username2 username3 ...\n\n` +
        `<b>–ü—Ä–∏–º–µ—Ä:</b>\n` +
        `/clear_and_add16 john_doe mary_smith alex_jones mike_wilson`
      , { parse_mode: 'HTML' });
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è add16Command
    const fakeMessage = {
      ...ctx.message,
      text: `/add16 ${args.join(' ')}`
    };

    const fakeCtx = {
      ...ctx,
      message: fakeMessage
    };

    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    await add16Command(fakeCtx as BotContext);

  } catch (error) {
    console.error('Error in clear_and_add16 command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤.');
  }
};

export const resetWeekCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      return;
    }

    const { week, year } = getCurrentWeek();

    const deletedCount = await prisma.weekEntry.deleteMany({
      where: { week, year }
    });

    await ctx.reply(`üóëÔ∏è –û—á–∏—â–µ–Ω–∞ –Ω–µ–¥–µ–ª—è ${week}/${year}. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${deletedCount.count}`);

  } catch (error) {
    console.error('Error in reset week command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–µ–¥–µ–ª–∏.');
  }
};

export const addPlayerCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      return;
    }

    const text = ('text' in ctx.message! && ctx.message.text) ? ctx.message.text : '';
    const args = text.split(' ').slice(1);

    if (args.length !== 1) {
      await ctx.reply(
        `üìã <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n` +
        `/add @username –∏–ª–∏ /add username\n\n` +
        `<b>–ü—Ä–∏–º–µ—Ä:</b>\n` +
        `/add john_doe`
      , { parse_mode: 'HTML' });
      return;
    }

    const { week, year } = getCurrentWeek();
    const username = args[0].replace('@', '');
    console.log(username)
    // –ò—â–µ–º –∏–≥—Ä–æ–∫–∞
    const player = await prisma.player.findFirst({
      where: { username }
    });

    if (!player) {
      await ctx.reply(`‚ùå –ò–≥—Ä–æ–∫ @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ
    const existingEntry = await prisma.weekEntry.findFirst({
      where: {
        week,
        year,
        playerId: player.id
      }
    });

    if (existingEntry) {
      await ctx.reply(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ @${username} —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é (${existingEntry.state === 'MAIN' ? '–æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤' : '–ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è'})`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö
    const currentCount = await prisma.weekEntry.count({
      where: { week, year }
    });

    const state = currentCount < 16 ? 'MAIN' : 'WAIT';

    await prisma.weekEntry.create({
      data: {
        week,
        year,
        playerId: player.id,
        state
      }
    });

    const position = currentCount + 1;
    const statusText = state === 'MAIN' ?
      `–æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤ (#${position})` :
      `–ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è (#${position - 16})`;

    await ctx.reply(
      `‚úÖ –ò–≥—Ä–æ–∫ ${player.firstName} (@${username}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ ${statusText}\n` +
      `üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–æ: ${position}/16`
    );

  } catch (error) {
    console.error('Error in add player command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞.');
  }
};