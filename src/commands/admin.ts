import { BotContext } from '../bot';
import { CONFIG } from '../config';
import { escapeHtml } from '../utils/html';
import { writeFileSync } from 'fs';
import { join } from 'path';
import { checkAdminPrivateOnly } from '../utils/chat';
import { prisma } from '../utils/database';
import { logger } from '../utils/logger';

export const playersCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    const players = await ctx.playerService.getAllPlayers();
    const { main, waiting } = await ctx.gameService.getWeekPlayers();

    let message = `üë• <b>–í—Å–µ –∏–≥—Ä–æ–∫–∏</b> (${players.length}):\n`;
    message += `<i>TS - TrueSkill Œº¬±œÉ (–Ω–∞–≤—ã–∫¬±–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å)</i>\n\n`;

    message += `‚öΩ <b>–û—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤</b> (${main.length}/16):\n`;
    main.forEach((player, index) => {
      const firstName = escapeHtml(player.firstName);
      const username = player.username ? ` @${player.username}` : '';
      const tsRating = player.tsMu.toFixed(1);
      const tsSigma = player.tsSigma.toFixed(1);
      message += `${index + 1}. ${firstName}${username} (TS: ${tsRating}¬±${tsSigma})\n`;
    });

    if (waiting.length > 0) {
      message += `\n‚è≥ <b>–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è</b> (${waiting.length}):\n`;
      waiting.forEach((player, index) => {
        const firstName = escapeHtml(player.firstName);
        const username = player.username ? ` @${player.username}` : '';
        const tsRating = player.tsMu.toFixed(1);
        const tsSigma = player.tsSigma.toFixed(1);
        message += `${index + 1}. ${firstName}${username} (TS: ${tsRating}¬±${tsSigma})\n`;
      });
    }

    const notInGame = players.filter(p => 
      !main.some(m => m.id === p.id) && !waiting.some(w => w.id === p.id)
    );

    if (notInGame.length > 0) {
      message += `\nüìã <b>–ù–µ –≤ –∏–≥—Ä–µ</b> (${notInGame.length}):\n`;
      notInGame.slice(0, 10).forEach(player => {
        const firstName = escapeHtml(player.firstName);
        const username = player.username ? ` @${player.username}` : '';
        const tsRating = player.tsMu.toFixed(1);
        const tsSigma = player.tsSigma.toFixed(1);
        message += `‚Ä¢ ${firstName}${username} (TS: ${tsRating}¬±${tsSigma})\n`;
      });
      
      if (notInGame.length > 10) {
        message += `... –∏ –µ—â–µ ${notInGame.length - 10} –∏–≥—Ä–æ–∫–æ–≤\n`;
      }
    }

    await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('Error in players command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤.');
  }
};

export const exportCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    const players = await ctx.playerService.getAllPlayers();
    
    const csvHeader = 'ID,Telegram ID,Username,First Name,TS Mu,TS Sigma,Is Admin,Created At\n';
    const csvData = players.map(p => 
      `${p.id},${p.telegramId},${p.username || ''},${p.firstName},${p.tsMu},${p.tsSigma},${p.isAdmin},${p.createdAt.toISOString()}`
    ).join('\n');

    const csv = csvHeader + csvData;
    const filename = `players_export_${new Date().toISOString().split('T')[0]}.csv`;
    const filepath = join(process.cwd(), 'data', filename);

    writeFileSync(filepath, csv, 'utf8');

    await ctx.replyWithDocument(
      { source: filepath, filename },
      { caption: `üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (${players.length} –∑–∞–ø–∏—Å–µ–π)` }
    );
  } catch (error) {
    console.error('Error in export command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.');
  }
};

export const statsCommand = async (ctx: BotContext): Promise<void> => {
  try {
    const { main, waiting } = await ctx.gameService.getWeekPlayers();
    const totalPlayers = await ctx.playerService.getAllPlayers();

    let message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã</b>\n\n`;
    message += `‚öΩ –û—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤: ${main.length}/16\n`;
    message += `‚è≥ –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è: ${waiting.length}\n`;
    message += `üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: ${totalPlayers.length}\n\n`;

    if (main.length > 0) {
      const avgTSRating = main.reduce((sum, p) => sum + p.tsMu, 0) / main.length;
      message += `üìà –°—Ä–µ–¥–Ω–∏–π TrueSkill —Ä–µ–π—Ç–∏–Ω–≥: ${avgTSRating.toFixed(1)}\n`;
    }

    message += `üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ö–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞: ${CONFIG.SCHEME}\n`;

    await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('Error in stats command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
};

export const migrateTriHistoryCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    await ctx.reply('üîÑ –ó–∞–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏—é TRI –∏—Å—Ç–æ—Ä–∏–∏...');

    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ TRI —Å–µ—Å—Å–∏–∏ —Å –º–∏–Ω–∏-–º–∞—Ç—á–∞–º–∏, –Ω–æ –±–µ–∑ MatchResult
      const triSessions = await prisma.gameSession.findMany({
        where: {
          format: 'TRI',
          matchResult: null,
          triMatches: {
            some: {} // –ï—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∏–Ω–∏-–º–∞—Ç—á
          }
        },
        include: {
          triMatches: true
        }
      });

      if (triSessions.length === 0) {
        await ctx.reply('‚úÖ –í—Å–µ TRI —Å–µ—Å—Å–∏–∏ —É–∂–µ –∏–º–µ—é—Ç –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏');
        return;
      }

      let migratedCount = 0;

      for (const session of triSessions) {
        try {
          // –°–æ–∑–¥–∞–µ–º MatchResult –∑–∞–ø–∏—Å—å –¥–ª—è TRI —Å–µ—Å—Å–∏–∏
          await prisma.matchResult.create({
            data: {
              gameSessionId: session.id,
              teamAScore: 0,
              teamBScore: 0, 
              winnerTeam: 'TRI', // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è TRI —Ñ–æ—Ä–º–∞—Ç–∞
              createdAt: session.createdAt
            }
          });

          migratedCount++;
        } catch (error) {
          logger.error(`Error migrating TRI session ${session.id}:`, error);
        }
      }

      await ctx.reply(
        `‚úÖ <b>–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n` +
        `üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${migratedCount}/${triSessions.length} TRI —Å–µ—Å—Å–∏–π\n\n` +
        `üèÜ –¢–µ–ø–µ—Ä—å "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –ú–í–ó" –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ`,
        { parse_mode: 'HTML' }
      );

    } catch (error) {
      logger.error('Migration error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ TRI –∏—Å—Ç–æ—Ä–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.');
    }

  } catch (error) {
    logger.error('Error in migrate_tri_history command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
  }
};