import { BotContext } from '../bot';
import { CONFIG } from '../config';
import { escapeHtml } from '../utils/html';
import { writeFileSync } from 'fs';
import { join } from 'path';
import { checkAdminPrivateOnly } from '../utils/chat';

export const playersCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    const players = await ctx.playerService.getAllPlayers();
    const { main, waiting } = await ctx.gameService.getWeekPlayers();

    let message = `üë• <b>–í—Å–µ –∏–≥—Ä–æ–∫–∏</b> (${players.length}):\n`;
    message += `<i>Self - —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞ (1-5), TS - TrueSkill Œº¬±œÉ (–Ω–∞–≤—ã–∫¬±–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å)</i>\n\n`;

    message += `‚öΩ <b>–û—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤</b> (${main.length}/16):\n`;
    main.forEach((player, index) => {
      const firstName = escapeHtml(player.firstName);
      const username = player.username ? ` @${player.username}` : '';
      const selfRating = player.skillSelf;
      const tsRating = player.tsMu.toFixed(1);
      const tsSigma = player.tsSigma.toFixed(1);
      message += `${index + 1}. ${firstName}${username} (Self: ${selfRating}, TS: ${tsRating}¬±${tsSigma})\n`;
    });

    if (waiting.length > 0) {
      message += `\n‚è≥ <b>–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è</b> (${waiting.length}):\n`;
      waiting.forEach((player, index) => {
        const firstName = escapeHtml(player.firstName);
        const username = player.username ? ` @${player.username}` : '';
        const selfRating = player.skillSelf;
        const tsRating = player.tsMu.toFixed(1);
        const tsSigma = player.tsSigma.toFixed(1);
        message += `${index + 1}. ${firstName}${username} (Self: ${selfRating}, TS: ${tsRating}¬±${tsSigma})\n`;
      });
    }

    const notInGame = players.filter(p => 
      !main.some(m => m.id === p.id) && !waiting.some(w => w.id === p.id)
    );

    if (notInGame.length > 0) {
      message += `\nüìã <b>–ù–µ –≤ –∏–≥—Ä–µ</b> (${notInGame.length}):\n`;
      notInGame.slice(0, 10).forEach(player => {
        const firstName = escapeHtml(player.firstName);
        const username = player.username ? ` @${player.username}` : '';
        const selfRating = player.skillSelf;
        const tsRating = player.tsMu.toFixed(1);
        const tsSigma = player.tsSigma.toFixed(1);
        message += `‚Ä¢ ${firstName}${username} (Self: ${selfRating}, TS: ${tsRating}¬±${tsSigma})\n`;
      });
      
      if (notInGame.length > 10) {
        message += `... –∏ –µ—â–µ ${notInGame.length - 10} –∏–≥—Ä–æ–∫–æ–≤\n`;
      }
    }

    await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('Error in players command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤.');
  }
};

export const exportCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!await checkAdminPrivateOnly(ctx)) {
      return;
    }

    const players = await ctx.playerService.getAllPlayers();
    
    const csvHeader = 'ID,Telegram ID,Username,First Name,Skill Self,TS Mu,TS Sigma,Is Admin,Created At\n';
    const csvData = players.map(p => 
      `${p.id},${p.telegramId},${p.username || ''},${p.firstName},${p.skillSelf},${p.tsMu},${p.tsSigma},${p.isAdmin},${p.createdAt.toISOString()}`
    ).join('\n');

    const csv = csvHeader + csvData;
    const filename = `players_export_${new Date().toISOString().split('T')[0]}.csv`;
    const filepath = join(process.cwd(), 'data', filename);

    writeFileSync(filepath, csv, 'utf8');

    await ctx.replyWithDocument(
      { source: filepath, filename },
      { caption: `üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (${players.length} –∑–∞–ø–∏—Å–µ–π)` }
    );
  } catch (error) {
    console.error('Error in export command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.');
  }
};

export const statsCommand = async (ctx: BotContext): Promise<void> => {
  try {
    const { main, waiting } = await ctx.gameService.getWeekPlayers();
    const totalPlayers = await ctx.playerService.getAllPlayers();

    let message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã</b>\n\n`;
    message += `‚öΩ –û—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤: ${main.length}/16\n`;
    message += `‚è≥ –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è: ${waiting.length}\n`;
    message += `üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: ${totalPlayers.length}\n\n`;

    if (main.length > 0) {
      const avgSkill = main.reduce((sum, p) => sum + p.skillSelf, 0) / main.length;
      message += `üìà –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã: ${avgSkill.toFixed(1)}\n`;
    }

    message += `üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ö–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞: ${CONFIG.SCHEME}\n`;

    await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('Error in stats command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
};