import { container } from 'tsyringe';
import { BotContext } from '../bot';
import { CONFIG, MESSAGES } from '../config';
import { RatingService } from '../services/rating.service';
import { TeamPlayerService } from '../services/team-player.service';
import { StatisticsService } from '../services/statistics.service';
import { prisma } from '../utils/database';

export const rateCommand = async (ctx: BotContext): Promise<void> => {
  try {
    await ctx.reply('‚ùå –ö–æ–º–∞–Ω–¥–∞ /rate –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –°–∏—Å—Ç–µ–º–∞ –∫–∞–ø–∏—Ç–∞–Ω—Å–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫ —É–¥–∞–ª–µ–Ω–∞.');
  } catch (error) {
    console.error('Error in rate command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.');
  }
};

export const schemeCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.reply(MESSAGES.ACCESS_DENIED);
      return;
    }

    await ctx.reply('–°—Ö–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ TrueSkill.');
  } catch (error) {
    console.error('Error in scheme command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ö–µ–º—ã —Ä–µ–π—Ç–∏–Ω–≥–∞.');
  }
};

export const resultCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.reply(MESSAGES.ACCESS_DENIED);
      return;
    }

    const text = ('text' in ctx.message! && ctx.message.text) ? ctx.message.text.replace('/result ', '') : '';
    const match = text.match(/^([AB])\s+(\d+)-(\d+)\s+([AB])$/);
    
    if (!match) {
      await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /result A 5-3 B');
      return;
    }

    const [, team1, score1Str, score2Str, team2] = match;
    const score1 = parseInt(score1Str);
    const score2 = parseInt(score2Str);

    if (team1 === team2) {
      await ctx.reply('–ö–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ (A –∏–ª–∏ B)');
      return;
    }

    const { week, year } = require('../utils/week').getCurrentWeek();
    const gameSession = await prisma.gameSession.findUnique({
      where: { week_year: { week, year } },
    });

    if (!gameSession || !gameSession.isConfirmed) {
      await ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∏–≥—Ä—ã');
      return;
    }

    const teamPlayerService = container.resolve(TeamPlayerService);
    const teamComposition = await teamPlayerService.getTeamComposition(gameSession.id);

    if (!teamComposition) {
      await ctx.reply('–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    const teamAPlayers = teamComposition.teamA.map(p => p.id);
    const teamBPlayers = teamComposition.teamB.map(p => p.id);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const statisticsService = container.resolve(StatisticsService);
    const teamAScore = team1 === 'A' ? score1 : score2;
    const teamBScore = team1 === 'A' ? score2 : score1;
    
    await statisticsService.saveMatchResult(gameSession.id, teamAScore, teamBScore);

    // –û–±–Ω–æ–≤–ª—è–µ–º TrueSkill —Ä–µ–π—Ç–∏–Ω–≥–∏
    const ratingService = container.resolve(RatingService);

    if (score1 > score2) {
      const winners = team1 === 'A' ? teamAPlayers : teamBPlayers;
      const losers = team1 === 'A' ? teamBPlayers : teamAPlayers;
      await ratingService.updateTrueSkill(winners, losers);
    } else if (score2 > score1) {
      const winners = team2 === 'A' ? teamAPlayers : teamBPlayers;
      const losers = team2 === 'A' ? teamBPlayers : teamAPlayers;
      await ratingService.updateTrueSkill(winners, losers);
    }

    await ctx.reply(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${team1} ${score1}-${score2} ${team2}\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
  } catch (error) {
    console.error('Error in result command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.');
  }
};

export const finishGameCommand = async (ctx: BotContext): Promise<void> => {
  try {
    if (!CONFIG.ADMINS.includes(ctx.from!.id)) {
      await ctx.reply(MESSAGES.ACCESS_DENIED);
      return;
    }

    const { week, year } = require('../utils/week').getCurrentWeek();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    const gameSession = await prisma.gameSession.findUnique({
      where: { week_year: { week, year } },
    });

    if (!gameSession || !gameSession.isInitialized) {
      await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
      return;
    }

    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirmMessage = `‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é?\n\n` +
      `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n` +
      `‚Ä¢ –°–±—Ä–æ—Å–∏—Ç —Ñ–ª–∞–≥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏\n` +
      `‚Ä¢ –û—á–∏—Å—Ç–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (WeekEntry)\n` +
      `‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é\n` +
      `üìä –°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n` +
      `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /finish_game confirm`;

    const args = ('text' in ctx.message! && ctx.message.text) ? ctx.message.text.split(' ') : [];
    
    if (args.length < 2 || args[1] !== 'confirm') {
      await ctx.reply(confirmMessage);
      return;
    }

    // –ù–ï —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!
    // –¢–æ–ª—å–∫–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    await prisma.gameSession.update({
      where: { week_year: { week, year } },
      data: {
        isConfirmed: false,
        isInitialized: false,
      },
    });

    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é (WeekEntry)
    await prisma.weekEntry.deleteMany({
      where: { week, year },
    });

    await ctx.reply(`‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞!\n\n` +
      `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n` +
      `üéÆ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥–æ–π /init_week`);
      
  } catch (error) {
    console.error('Error in finish_game command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã.');
  }
};