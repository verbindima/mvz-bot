import 'reflect-metadata';
import { prisma } from '../utils/database';
import { container } from 'tsyringe';
import { PairService } from '../services/pair.service';
import { logger } from '../utils/logger';

interface MatchData {
  id: number;
  week: number;
  year: number;
  teamAPlayers: number[];
  teamBPlayers: number[];
  winnerTeam: 'A' | 'B' | 'DRAW';
  matchDate: Date;
}

async function getExistingMatches(): Promise<MatchData[]> {
  console.log('üîç –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π...');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
  const sessions = await prisma.gameSession.findMany({
    where: {
      matchResult: {
        isNot: null
      }
    },
    include: {
      matchResult: true,
      teamPlayers: {
        include: {
          player: true
        }
      }
    },
    orderBy: {
      createdAt: 'asc'
    }
  });

  const matches: MatchData[] = [];

  for (const session of sessions) {
    if (!session.matchResult) continue;

    const teamAPlayers = session.teamPlayers
      .filter(tp => tp.team === 'A')
      .map(tp => tp.playerId);
    
    const teamBPlayers = session.teamPlayers
      .filter(tp => tp.team === 'B')
      .map(tp => tp.playerId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏ –≤ –æ–±–µ–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
    if (teamAPlayers.length === 0 || teamBPlayers.length === 0) {
      console.warn(`‚ö†Ô∏è  –ú–∞—Ç—á ${session.week}-${session.year} –ø—Ä–æ–ø—É—â–µ–Ω: –Ω–µ–ø–æ–ª–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥`);
      continue;
    }

    matches.push({
      id: session.id,
      week: session.week,
      year: session.year,
      teamAPlayers,
      teamBPlayers,
      winnerTeam: session.matchResult.winnerTeam as 'A' | 'B' | 'DRAW',
      matchDate: session.matchResult.createdAt
    });
  }

  return matches;
}

async function migrateExistingMatches() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç—á–µ–π...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏
    const matches = await getExistingMatches();
    
    if (matches.length === 0) {
      console.log('‚ÑπÔ∏è  –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${matches.length} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:\n`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏
    matches.forEach((match, index) => {
      console.log(`${index + 1}. –ù–µ–¥–µ–ª—è ${match.year}-${match.week}: –∫–æ–º–∞–Ω–¥–∞ ${match.winnerTeam === 'DRAW' ? '–Ω–∏—á—å—è' : match.winnerTeam} (${match.matchDate.toLocaleDateString('ru-RU')})`);
      console.log(`   –ö–æ–º–∞–Ω–¥–∞ A: ${match.teamAPlayers.length} –∏–≥—Ä–æ–∫–æ–≤`);
      console.log(`   –ö–æ–º–∞–Ω–¥–∞ B: ${match.teamBPlayers.length} –∏–≥—Ä–æ–∫–æ–≤\n`);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PairService
    const pairService = container.resolve(PairService);

    console.log('‚öôÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á–∏...\n');

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á
    let processedCount = 0;
    for (const match of matches) {
      try {
        console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á ${match.year}-${match.week}...`);

        let winnerIds: number[], loserIds: number[];

        if (match.winnerTeam === 'A') {
          winnerIds = match.teamAPlayers;
          loserIds = match.teamBPlayers;
        } else if (match.winnerTeam === 'B') {
          winnerIds = match.teamBPlayers;
          loserIds = match.teamAPlayers;
        } else {
          // –ù–∏—á—å—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å–ª–∏ –±—ã –æ–±–µ –∫–æ–º–∞–Ω–¥—ã "–≤—ã–∏–≥—Ä–∞–ª–∏" —á–∞—Å—Ç–∏—á–Ω–æ
          // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –º–æ–∂–µ–º —Å—á–∏—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É A "–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º" –≤ –Ω–∏—á—å–µ–π
          console.log('   –ù–∏—á—å—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–±–µ–¥—É –∫–æ–º–∞–Ω–¥—ã A');
          winnerIds = match.teamAPlayers;
          loserIds = match.teamBPlayers;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä
        await pairService.updateAfterMatch(winnerIds, loserIds, match.matchDate);
        
        processedCount++;
        console.log(`   ‚úÖ –ú–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω (${processedCount}/${matches.length})\n`);

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—á–∞ ${match.year}-${match.week}:`, error);
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('üìà –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏...\n');
    
    const totalPairs = await prisma.playerPair.count();
    const activePairs = await prisma.playerPair.count({
      where: {
        OR: [
          { togetherGames: { gt: 0 } },
          { vsGames: { gt: 0 } }
        ]
      }
    });

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:`);
    console.log(`   –í—Å–µ–≥–æ –ø–∞—Ä –≤ –±–∞–∑–µ: ${totalPairs}`);
    console.log(`   –ü–∞—Ä —Å –∏–≥—Ä–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π: ${activePairs}`);
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞—Ç—á–µ–π: ${processedCount}/${matches.length}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
    const topPairs = await prisma.playerPair.findMany({
      where: {
        togetherGames: { gt: 0 }
      },
      include: {
        playerA: { select: { firstName: true } },
        playerB: { select: { firstName: true } }
      },
      orderBy: {
        togetherGames: 'desc'
      },
      take: 5
    });

    if (topPairs.length > 0) {
      console.log(`\nü§ù –¢–æ–ø-5 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤:`);
      topPairs.forEach((pair, index) => {
        const winRate = pair.togetherGames > 0 ? (pair.togetherWins / pair.togetherGames * 100).toFixed(1) : '0';
        console.log(`   ${index + 1}. ${pair.playerA.firstName} + ${pair.playerB.firstName}: ${pair.togetherGames} –∏–≥—Ä, ${winRate}% –ø–æ–±–µ–¥`);
      });
    }

    console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üß™ –°–∏—Å—Ç–µ–º–∞ —Ö–∏–º–∏–∏ –∫–æ–º–∞–Ω–¥ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  migrateExistingMatches()
    .then(() => {
      console.log('\nüéâ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { migrateExistingMatches };