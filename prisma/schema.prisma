generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id           Int         @id @default(autoincrement())
  telegramId   BigInt      @unique
  username     String?
  firstName    String
  skillCaptain Float       @default(0)
  tsMu         Float       @default(25)
  tsSigma      Float       @default(8.333)
  isAdmin      Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  weekEntries  WeekEntry[]
  ratings      Rating[]
  teamPlayers  TeamPlayer[]

  @@map("players")
}

model WeekEntry {
  id           Int       @id @default(autoincrement())
  week         Int
  year         Int
  playerId     Int
  state        String    @default("MAIN")
  isPaid       Boolean   @default(false)
  paymentTime  DateTime?
  createdAt    DateTime  @default(now())

  player       Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([week, year, playerId])
  @@map("week_entries")
}

model Rating {
  id        Int      @id @default(autoincrement())
  matchId   Int
  playerId  Int
  delta     Int
  scheme    String   @default("captain")
  createdAt DateTime @default(now())

  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("ratings")
}

model GameSession {
  id              Int      @id @default(autoincrement())
  week            Int
  year            Int
  teamA           String   @default("")
  teamB           String   @default("")
  isConfirmed     Boolean  @default(false)
  isInitialized   Boolean  @default(false)
  paymentPhone    String?
  paymentBank     String?
  paymentAmount   Float?
  gameDate        DateTime?
  gameLocation    String?
  createdAt       DateTime @default(now())

  // Relations
  teamPlayers     TeamPlayer[]
  matchResult     MatchResult?

  @@unique([week, year])
  @@map("game_sessions")
}

model TeamPlayer {
  id            Int         @id @default(autoincrement())
  gameSessionId Int
  playerId      Int
  team          String      // "A" or "B"
  createdAt     DateTime    @default(now())

  // Relations
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  player        Player      @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([gameSessionId, playerId])
  @@map("team_players")
}

model MatchResult {
  id            Int         @id @default(autoincrement())
  gameSessionId Int         @unique
  teamAScore    Int
  teamBScore    Int
  winnerTeam    String      // "A" or "B"
  createdAt     DateTime    @default(now())

  // Relations
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)

  @@map("match_results")
}

