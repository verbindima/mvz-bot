generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id            Int         @id @default(autoincrement())
  telegramId    BigInt      @unique
  username      String?
  firstName     String
  tsMu          Float       @default(25)
  tsSigma       Float       @default(8.333)
  isAdmin       Boolean     @default(false)
  lastPlayedAt  DateTime?   @db.Timestamp(6)
  firstPlayedAt DateTime?   @db.Timestamp(6)
  gamesPlayed   Int         @default(0)
  mvpCount      Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  weekEntries   WeekEntry[]
  ratings       Rating[]
  teamPlayers   TeamPlayer[]
  ratingEvents  RatingEvent[]
  pairsAsA      PlayerPair[] @relation("PlayerAPairs")
  pairsAsB      PlayerPair[] @relation("PlayerBPairs")

  @@map("players")
}

model WeekEntry {
  id           Int       @id @default(autoincrement())
  week         Int
  year         Int
  playerId     Int
  state        String    @default("MAIN")
  isPaid       Boolean   @default(false)
  paymentTime  DateTime?
  createdAt    DateTime  @default(now())

  player       Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([week, year, playerId])
  @@map("week_entries")
}

model Rating {
  id        Int      @id @default(autoincrement())
  matchId   Int
  playerId  Int
  delta     Int
  createdAt DateTime @default(now())

  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("ratings")
}

model GameSession {
  id              Int      @id @default(autoincrement())
  week            Int
  year            Int
  teamA           String   @default("")
  teamB           String   @default("")
  isConfirmed     Boolean  @default(false)
  isInitialized   Boolean  @default(false)
  paymentPhone    String?
  paymentBank     String?
  paymentAmount   Float?
  gameDate        DateTime?
  gameLocation    String?
  createdAt       DateTime @default(now())

  // Relations
  teamPlayers     TeamPlayer[]
  matchResult     MatchResult?

  @@unique([week, year])
  @@map("game_sessions")
}

model TeamPlayer {
  id            Int         @id @default(autoincrement())
  gameSessionId Int
  playerId      Int
  team          String      // "A" or "B"
  createdAt     DateTime    @default(now())

  // Relations
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  player        Player      @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([gameSessionId, playerId])
  @@map("team_players")
}

model MatchResult {
  id            Int         @id @default(autoincrement())
  gameSessionId Int         @unique
  teamAScore    Int
  teamBScore    Int
  winnerTeam    String      // "A", "B", or "DRAW"
  createdAt     DateTime    @default(now())

  // Relations
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)

  @@map("match_results")
}

enum RatingEventReason {
  match
  idle
  mvp
}

model RatingEvent {
  id          Int                @id @default(autoincrement())
  playerId    Int
  matchId     Int?
  muBefore    Float
  muAfter     Float
  sigmaBefore Float
  sigmaAfter  Float
  reason      RatingEventReason
  meta        Json?              // Additional metadata (weeks inactive, MVP bonus amount, etc.)
  createdAt   DateTime           @default(now())

  // Relations
  player      Player             @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("rating_events")
}

model PlayerPair {
  id              Int      @id @default(autoincrement())
  playerAId       Int      // Always smaller player ID
  playerBId       Int      // Always larger player ID
  
  // Together stats
  togetherGames   Int      @default(0)
  togetherWins    Int      @default(0)
  
  // Versus stats  
  vsGames         Int      @default(0)
  vsWins          Int      @default(0)  // Wins by playerA against playerB
  
  // Calculated ratings
  synergyMu       Float    @default(0)
  synergySigma    Float    @default(1)
  counterMu       Float    @default(0)
  counterSigma    Float    @default(1)
  
  lastGameAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  playerA         Player   @relation("PlayerAPairs", fields: [playerAId], references: [id], onDelete: Cascade)
  playerB         Player   @relation("PlayerBPairs", fields: [playerBId], references: [id], onDelete: Cascade)

  @@unique([playerAId, playerBId])
  @@map("player_pairs")
}

