generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id            Int           @id @default(autoincrement())
  telegramId    BigInt        @unique
  username      String?
  firstName     String
  tsMu          Float         @default(25)
  tsSigma       Float         @default(8.333)
  isAdmin       Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  firstPlayedAt DateTime?     @db.Timestamp(6)
  gamesPlayed   Int           @default(0)
  lastPlayedAt  DateTime?     @db.Timestamp(6)
  mvpCount      Int           @default(0)
  pairsAsA      PlayerPair[]  @relation("PlayerAPairs")
  pairsAsB      PlayerPair[]  @relation("PlayerBPairs")
  ratingEvents  RatingEvent[]
  ratings       Rating[]
  teamPlayers   TeamPlayer[]
  weekEntries   WeekEntry[]

  @@map("players")
}

model WeekEntry {
  id          Int       @id @default(autoincrement())
  week        Int
  year        Int
  playerId    Int
  state       String    @default("MAIN")
  isPaid      Boolean   @default(false)
  paymentTime DateTime?
  createdAt   DateTime  @default(now())
  player      Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([week, year, playerId])
  @@map("week_entries")
}

model Rating {
  id        Int      @id @default(autoincrement())
  matchId   Int
  playerId  Int
  delta     Int
  createdAt DateTime @default(now())
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("ratings")
}

model GameSession {
  id            Int            @id @default(autoincrement())
  week          Int
  year          Int
  teamA         String         @default("")
  teamB         String         @default("")
  isConfirmed   Boolean        @default(false)
  isInitialized Boolean        @default(false)
  isClosed      Boolean        @default(false)
  paymentPhone  String?
  paymentBank   String?
  paymentAmount Float?
  gameDate      DateTime?
  gameLocation  String?
  createdAt     DateTime       @default(now())
  format        GameFormat     @default(DUO)
  teamC         String?
  matchResult   MatchResult?
  teamPlayers   TeamPlayer[]
  triMatches    TriMiniMatch[]

  @@unique([week, year])
  @@map("game_sessions")
}

model TeamPlayer {
  id            Int         @id @default(autoincrement())
  gameSessionId Int
  playerId      Int
  team          String
  createdAt     DateTime    @default(now())
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  player        Player      @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([gameSessionId, playerId])
  @@map("team_players")
}

model MatchResult {
  id            Int         @id @default(autoincrement())
  gameSessionId Int         @unique
  teamAScore    Int
  teamBScore    Int
  winnerTeam    String
  createdAt     DateTime    @default(now())
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)

  @@map("match_results")
}

model RatingEvent {
  id          Int               @id @default(autoincrement())
  playerId    Int
  matchId     Int?
  muBefore    Float
  muAfter     Float
  sigmaBefore Float
  sigmaAfter  Float
  reason      RatingEventReason
  meta        Json?
  createdAt   DateTime          @default(now())
  player      Player            @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("rating_events")
}

model PlayerPair {
  id            Int       @id @default(autoincrement())
  playerAId     Int
  playerBId     Int
  togetherGames Int       @default(0)
  togetherWins  Int       @default(0)
  vsGames       Int       @default(0)
  vsWins        Int       @default(0)
  synergyMu     Float     @default(0)
  synergySigma  Float     @default(1)
  counterMu     Float     @default(0)
  counterSigma  Float     @default(1)
  lastGameAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  playerA       Player    @relation("PlayerAPairs", fields: [playerAId], references: [id], onDelete: Cascade)
  playerB       Player    @relation("PlayerBPairs", fields: [playerBId], references: [id], onDelete: Cascade)

  @@unique([playerAId, playerBId])
  @@map("player_pairs")
}

model TriMiniMatch {
  id            Int         @id @default(autoincrement())
  sessionId     Int
  seq           Int
  t1            String
  t2            String
  s1            Int
  s2            Int
  winner        String?
  createdAt     DateTime    @default(now())
  ratingApplied Boolean     @default(false)
  gameSession   GameSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, seq])
  @@map("tri_mini_matches")
}

enum RatingEventReason {
  match
  idle
  mvp
}

enum GameFormat {
  DUO
  TRI
}
