"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateTriHistory = migrateTriHistory;
require("reflect-metadata");
const database_1 = require("../src/utils/database");
async function migrateTriHistory() {
    try {
        console.log('üîç –ü–æ–∏—Å–∫ TRI —Å–µ—Å—Å–∏–π –±–µ–∑ MatchResult –∑–∞–ø–∏—Å–µ–π...');
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ TRI —Å–µ—Å—Å–∏–∏ —Å –º–∏–Ω–∏-–º–∞—Ç—á–∞–º–∏, –Ω–æ –±–µ–∑ MatchResult
        const triSessions = await database_1.prisma.gameSession.findMany({
            where: {
                format: 'TRI',
                matchResult: null,
                triMatches: {
                    some: {} // –ï—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∏–Ω–∏-–º–∞—Ç—á
                }
            },
            include: {
                triMatches: true
            }
        });
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${triSessions.length} TRI —Å–µ—Å—Å–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);
        if (triSessions.length === 0) {
            console.log('‚úÖ –í—Å–µ TRI —Å–µ—Å—Å–∏–∏ —É–∂–µ –∏–º–µ—é—Ç MatchResult –∑–∞–ø–∏—Å–∏');
            return;
        }
        let migratedCount = 0;
        for (const session of triSessions) {
            try {
                console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é TRI —Å–µ—Å—Å–∏—é ${session.id} (–Ω–µ–¥–µ–ª—è ${session.week}-${session.year})`);
                console.log(`   üìù –ú–∏–Ω–∏-–º–∞—Ç—á–µ–π: ${session.triMatches.length}`);
                // –°–æ–∑–¥–∞–µ–º MatchResult –∑–∞–ø–∏—Å—å –¥–ª—è TRI —Å–µ—Å—Å–∏–∏
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—á–µ—Ç 0-0 —Ç–∞–∫ –∫–∞–∫ –≤ TRI –Ω–µ—Ç –µ–¥–∏–Ω–æ–≥–æ —Å—á–µ—Ç–∞
                await database_1.prisma.matchResult.create({
                    data: {
                        gameSessionId: session.id,
                        teamAScore: 0,
                        teamBScore: 0,
                        winnerTeam: 'TRI', // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è TRI —Ñ–æ—Ä–º–∞—Ç–∞
                        createdAt: session.createdAt
                    }
                });
                migratedCount++;
                console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ MatchResult –∑–∞–ø–∏—Å—å –¥–ª—è —Å–µ—Å—Å–∏–∏ ${session.id}`);
            }
            catch (error) {
                console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ ${session.id}:`, error);
            }
        }
        console.log(`\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${migratedCount}/${triSessions.length} TRI —Å–µ—Å—Å–∏–π`);
        if (migratedCount > 0) {
            console.log(`\nüí° –¢–µ–ø–µ—Ä—å TRI –∏–≥—Ä—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∫–∞–∫ "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –ú–í–ó"`);
        }
    }
    catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ TRI –∏—Å—Ç–æ—Ä–∏–∏:', error);
        throw error;
    }
}
// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    migrateTriHistory()
        .then(() => {
        console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
        process.exit(0);
    })
        .catch((error) => {
        console.error('üí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
        process.exit(1);
    });
}
