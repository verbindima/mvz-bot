name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  
jobs:
  build:
    runs-on: ubuntu-latest
    name: Build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: |
          corepack enable
          echo "Yarn version: $(yarn --version)"

      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/unplugged
            .yarn/build-state.yml
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build project
        run: yarn build

      - name: Create deployment archive
        run: |
          tar -czf deployment.tar.gz \
            dist/ \
            package.json \
            yarn.lock \
            .yarnrc.yml \
            prisma/ \
            .env.example \
            ecosystem.config.js

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment
          path: deployment.tar.gz
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Server
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: prod

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment

      - name: Extract deployment archive
        run: |
          tar -xzf deployment.tar.gz
          ls -la

      - name: Upload files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || '22' }}
          source: "dist,package.json,prisma,.env.example,ecosystem.config.js,yarn.lock,.yarnrc.yml"
          target: "/tmp/mvz-deploy"

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || '22' }}
          script_stop: true
          script: |
            # Set variables
            APP_DIR="/opt/mvz-bot"
            BACKUP_DIR="/opt/mvz-bot-backups"
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            
            # Create backup directory
            mkdir -p $BACKUP_DIR
            
            # Backup current installation if exists
            if [ -d "$APP_DIR" ]; then
              echo "Creating backup..."
              cp -r $APP_DIR $BACKUP_DIR/mvz-bot-$TIMESTAMP
              
              # Stop the application
              pm2 stop mvz-bot || true
              
              # Keep only last 5 backups
              cd $BACKUP_DIR
              ls -t | tail -n +6 | xargs -r rm -rf
            fi
            
            # Create app directory and move files
            mkdir -p $APP_DIR
            cp -r /tmp/mvz-deploy/* $APP_DIR/
            cd $APP_DIR
            
            # Check Node.js version and enable Corepack
            echo "Node.js version: $(node --version)"
            if command -v corepack &> /dev/null; then
              corepack enable
              echo "‚úÖ Corepack enabled for Yarn 4.x support"
              echo "Yarn version: $(yarn --version)"
            else
              echo "‚ö†Ô∏è  Corepack not available, using system Yarn"
              echo "Yarn version: $(yarn --version)"
            fi
            
            # Check system resources
            echo "Available memory:"
            free -h || echo "free command not available"
            echo "Available disk space:"
            df -h . || echo "df command not available"
            
            # Install dependencies with optimizations for low-memory servers
            echo "Installing dependencies..."
            export NODE_OPTIONS="--max-old-space-size=512"
            export YARN_ENABLE_GLOBAL_CACHE=false
            export YARN_CACHE_FOLDER="/tmp/yarn-cache"
            
            # Check if we have enough memory (need at least 500MB free)
            AVAILABLE_MEM=$(free -m | awk 'NR==2{printf "%.0f", $7}')
            echo "Available memory: ${AVAILABLE_MEM}MB"
            if [ "$AVAILABLE_MEM" -lt 500 ]; then
              echo "‚ö†Ô∏è Low memory detected (${AVAILABLE_MEM}MB < 500MB), using npm instead of Yarn"
              if command -v npm &> /dev/null; then
                echo "Switching to npm for low-memory installation..."
                NODE_ENV=production npm ci --production --no-audit --no-fund || \
                NODE_ENV=production npm install --production --no-audit --no-fund
                
                # Use npm-installed prisma
                echo "Running Prisma with npm..."
                npx prisma generate
                npx prisma migrate deploy
                
                echo "‚úÖ npm installation completed"
                # Skip to application start
                pm2 start ecosystem.config.js --env production
                pm2 save
                rm -rf /tmp/mvz-deploy
                echo "‚úÖ Deployment completed successfully with npm!"
                exit 0
              fi
            fi
            
            # Use timeout to prevent hanging
            timeout 900 bash -c "NODE_ENV=production yarn install --check-cache" || {
              echo "‚ùå Yarn install failed, trying fallback options..."
              
              # Try clearing cache first
              yarn cache clean --all
              timeout 600 bash -c "NODE_ENV=production yarn install --no-immutable" || {
                echo "‚ùå Yarn still failing, trying with npm as fallback..."
                
                # Convert yarn.lock to package-lock.json if needed
                if command -v npm &> /dev/null; then
                  rm -f package-lock.json
                  NODE_ENV=production npm install --production --no-audit --no-fund
                else
                  echo "‚ùå Both Yarn and npm failed"
                  exit 1
                fi
              }
            }
            
            # Setup environment if not exists
            if [ ! -f .env ]; then
              cp .env.example .env
              echo "‚ö†Ô∏è  Please configure .env file with production values"
            fi
            
            # Run database migrations with memory optimization
            echo "Generating Prisma client..."
            export NODE_OPTIONS="--max-old-space-size=512"
            
            # Check if prisma is already installed
            if [ -f "node_modules/.bin/prisma" ]; then
              echo "Using local Prisma installation"
              ./node_modules/.bin/prisma generate
              ./node_modules/.bin/prisma migrate deploy
            else
              echo "Using npx with memory limits"
              timeout 300 npx --yes prisma@5.15.0 generate || {
                echo "‚ùå Prisma generate failed, trying alternative approach"
                NODE_ENV=production npm install prisma@5.15.0 --no-save
                npx prisma generate
              }
              timeout 300 npx prisma migrate deploy
            fi
            
            # Start application
            pm2 start ecosystem.config.js --env production
            pm2 save
            
            # Cleanup
            rm -rf /tmp/mvz-deploy
            
            echo "‚úÖ Deployment completed successfully!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üéâ Deployment successful!"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi