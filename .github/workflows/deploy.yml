name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  
jobs:
  build:
    runs-on: ubuntu-latest
    name: Build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build project
        run: yarn build

      - name: Create deployment archive
        run: |
          tar -czf deployment.tar.gz \
            dist/ \
            package.json \
            yarn.lock \
            prisma/ \
            .env.example \
            ecosystem.config.js

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment
          path: deployment.tar.gz
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Server
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: prod

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment

      - name: Extract deployment archive
        run: |
          tar -xzf deployment.tar.gz
          ls -la

      - name: Upload files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || '22' }}
          source: "dist,package.json,prisma,.env.example,ecosystem.config.js,yarn.lock"
          target: "/tmp/mvz-deploy"

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || '22' }}
          script_stop: true
          script: |
            # Set variables
            APP_DIR="/opt/mvz-bot"
            BACKUP_DIR="/opt/mvz-bot-backups"
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            
            # Create backup directory
            mkdir -p $BACKUP_DIR
            
            # Backup current installation if exists
            if [ -d "$APP_DIR" ]; then
              echo "Creating backup..."
              cp -r $APP_DIR $BACKUP_DIR/mvz-bot-$TIMESTAMP
              
              # Stop the application
              pm2 stop mvz-bot || true
              
              # Keep only last 5 backups
              cd $BACKUP_DIR
              ls -t | tail -n +6 | xargs -r rm -rf
            fi
            
            # Create app directory and move files
            mkdir -p $APP_DIR
            cp -r /tmp/mvz-deploy/* $APP_DIR/
            cd $APP_DIR
            
            # Install dependencies
            yarn install --production
            
            # Setup environment if not exists
            if [ ! -f .env ]; then
              cp .env.example .env
              echo "‚ö†Ô∏è  Please configure .env file with production values"
            fi
            
            # Run database migrations
            npx prisma generate
            npx prisma migrate deploy
            
            # Start application
            pm2 start ecosystem.config.js --env production
            pm2 save
            
            # Cleanup
            rm -rf /tmp/mvz-deploy
            
            echo "‚úÖ Deployment completed successfully!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üéâ Deployment successful!"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi